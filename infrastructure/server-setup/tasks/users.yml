- name: Ensure users are present
  user:
    name: '{{ item.name }}'
    state: '{{ item.state }}'
  with_items: '{{ users }}'

- name: Grant passwordless sudo to the users, but prevent usage of 'su'
  ansible.builtin.lineinfile:
    path: /etc/sudoers.d/{{ item.name }}
    line: '{{ item.name }} ALL=(ALL) NOPASSWD:ALL, !/usr/bin/su'
    validate: 'visudo -cf %s'
    create: yes
  become: yes
  when: item.state == 'present' and item.sudoer == true
  with_items: '{{ users }}'

- name: Set authorized keys for users
  authorized_key:
    user: '{{ item.0.name }}'
    key: '{{ item.1 }}'
  when: item.0.state == 'present'
  with_subelements:
    - '{{ users }}'
    - ssh_keys

- name: Ensure user's shell is bash
  user:
    name: '{{ item.name }}'
    shell: /bin/bash
  when: item.state == 'present'
  with_items: '{{ users }}'

- name: Ensure TERM is set in .bashrc
  lineinfile:
    path: /home/{{ item.name }}/.bashrc
    line: 'export TERM=xterm'
    create: yes
  when: item.state == 'present'
  with_items: '{{ users }}'

- name: Ensure history has timestamps
  lineinfile:
    path: /home/{{ item.name }}/.bashrc
    line: 'export HISTTIMEFORMAT="%d/%m/%y %T "'
    create: yes
  when: item.state == 'present'
  with_items: '{{ users }}'

- name: Ensure 2FA setup lines are present in .profile for each user
  blockinfile:
    path: '/home/{{ item.name }}/.profile'
    block: |
      if [ ! -f "$HOME/.google_authenticator" ]; then
          echo "You must set up two-factor authentication."
          (trap 'echo "Ctrl+C detected."' INT; google-authenticator) || exit 1
      fi
    create: yes
    owner: '{{ item.name }}'
    group: '{{ item.name }}'
    mode: '0644'
  when: item.state == 'present' and (item.two_factor | default(true)) != false
  with_items: '{{ users }}'

- name: 'Install libpam-google-authenticator'
  apt:
    name: libpam-google-authenticator
    state: present
    update_cache: yes

- name: Ensure pam_google_authenticator.so is present in /etc/pam.d/sshd
  lineinfile:
    path: /etc/pam.d/sshd
    line: 'auth required pam_google_authenticator.so nullok'
    state: present

- name: Add condition for users in users.yml for 2FA in /etc/pam.d/sshd
  lineinfile:
    path: /etc/pam.d/sshd
    insertafter: 'auth required pam_google_authenticator.so nullok'
    line: 'auth required pam_permit.so'
    state: present

- name: Disable default auth mechanism (password) in PAM
  lineinfile:
    path: /etc/pam.d/sshd
    regexp: '^@include common-auth'
    line: '#@include common-auth'
    state: present

- name: Check short Diffie-Hellman keys
  ansible.builtin.shell: |
    awk '$5 < 3071' /etc/ssh/moduli | grep -q .
  register: short_dh_keys
  ignore_errors: yes

- name: Remove short Diffie-Hellman keys
  ansible.builtin.shell: |
    awk '$5 >= 3071' /etc/ssh/moduli > /etc/ssh/moduli.safe
    mv /etc/ssh/moduli.safe /etc/ssh/moduli
  when: short_dh_keys.rc == 0
  become: yes

# Cleanup weak server keys 
- name: Remove existing SSH host keys except for RSA and ED25519
  ansible.builtin.command:
    cmd: "find /etc/ssh -type f -name 'ssh_host_*' ! -name 'ssh_host_rsa_key' ! -name 'ssh_host_ed25519_key' -exec rm -f {} +"
- name: Generate new RSA SSH host key if it does not exist
  ansible.builtin.command:
    cmd: "ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N ''"
  args:
    creates: /etc/ssh/ssh_host_rsa_key

- name: Generate new ED25519 SSH host key if it does not exist
  ansible.builtin.command:
    cmd: "ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ''"
  args:
    creates: /etc/ssh/ssh_host_ed25519_key

# Allow only Strong server keys
- name: Ensure HostKey for ED25519 is present in sshd_config
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    line: "HostKey /etc/ssh/ssh_host_ed25519_key"

- name: Ensure HostKey for RSA is present in sshd_config
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    line: "HostKey /etc/ssh/ssh_host_rsa_key"

- name: Set AuthenticationMethods to publickey,keyboard-interactive
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?AuthenticationMethods'
    line: 'AuthenticationMethods publickey,keyboard-interactive'
    state: present

- name: Enable ChallengeResponseAuthentication in SSHD Config
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?ChallengeResponseAuthentication'
    line: 'ChallengeResponseAuthentication yes'
    state: present

- name: Enable PubkeyAuthentication in SSHD Config
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PubkeyAuthentication'
    line: 'PubkeyAuthentication yes'
    state: present

- name: Disable SSH root login so all maintainers log in as their own user
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PermitRootLogin'
    line: 'PermitRootLogin no'
    state: present
  when: ansible_user != "root"

- name: Disable root account login completely
  ansible.builtin.command:
    cmd: passwd -l root
  become: yes
  when: ansible_user != "root"

- name: Enable KbdInteractiveAuthentication in SSHD Config
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?KbdInteractiveAuthentication'
    line: 'KbdInteractiveAuthentication yes'
    state: present

- name: Disable PasswordAuthentication in SSHD Config
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PasswordAuthentication'
    line: 'PasswordAuthentication no'
    state: present

- name: Disable PermitEmptyPasswords in SSHD Config
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PermitEmptyPasswords'
    line: 'PermitEmptyPasswords no'
    state: present

- name: Only require public key from the user "{{ ansible_user }}"
  blockinfile:
    path: /etc/ssh/sshd_config
    # Match block must have ending Match all
    # https://linux.die.net/man/5/sshd_config
    block: |
      Match User {{ ansible_user }}
        PasswordAuthentication no
        AuthenticationMethods publickey
      Match all
    marker: '# {mark} ANSIBLE MANAGED BLOCK FOR USER {{ ansible_user }}'
  become: yes


# Add restriction configuration to sshd_config
# For Ubuntu 22.04
- name: SSHD Restrict key exchange, cipher, and MAC algorithms (Ubuntu 22.04)
  ansible.builtin.copy:
    src: ./files/sshd_audit_hardening.22.04.conf
    dest: /etc/ssh/sshd_config.d/audit_hardening.conf
    owner: root
    group: root
    mode: '0644'
  when:
    - ansible_facts['os_family'] == 'Debian'
    - ansible_facts['distribution'] == 'Ubuntu'
    - ansible_facts['distribution_version'] is version('22.04', '<=')
# For Ubuntu 24.04
- name: SSHD Restrict key exchange, cipher, and MAC algorithms (Ubuntu 24.04)
  ansible.builtin.copy:
    src: ./files/sshd_audit_hardening.24.04.conf
    dest: /etc/ssh/sshd_config.d/ssh-audit_hardening.conf
    owner: root
    group: root
    mode: '0644'
  when:
    - ansible_facts['os_family'] == 'Debian'
    - ansible_facts['distribution'] == 'Ubuntu'
    - ansible_facts['distribution_version'] == '24.04'

- name: Check SSH config syntax
  command: sshd -T
  register: check_result

- name: Enable logging in to the provisioning user with specified SSH keys
  authorized_key:
    user: '{{ ansible_user }}'
    key: '{{ item }}'
  with_items: '{{ additional_keys_for_provisioning_user | default([]) }}'

# Ubuntu 22.10
- name: Check if sshd service exists
  command: systemctl status sshd
  register: sshd_status
  ignore_errors: yes

- name: Restart SSH service (sshd)
  service:
    name: sshd
    state: restarted
  when: sshd_status.rc == 0
  become: yes

# Ubuntu 23.10
- name: Check if ssh service exists
  command: systemctl status ssh
  register: ssh_status
  ignore_errors: yes

- name: Restart SSH service (ssh)
  service:
    name: ssh
    state: restarted
  when: ssh_status.rc == 0 and sshd_status.rc != 0
  become: yes
