/* DO NOT EDIT! This file is auto-generated by yarn data-generator:generate-types - see `codegen.yml` */
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  Date: any
  Map: any
}

export type AdditionalIdWithCompositionId = {
  __typename?: 'AdditionalIdWithCompositionId'
  compositionId: Scalars['String']
  trackingId: Scalars['String']
}

export type Address = {
  __typename?: 'Address'
  city?: Maybe<Scalars['String']>
  country?: Maybe<Scalars['String']>
  district?: Maybe<Scalars['String']>
  districtName?: Maybe<Scalars['String']>
  from?: Maybe<Scalars['Date']>
  line?: Maybe<Array<Maybe<Scalars['String']>>>
  lineName?: Maybe<Array<Maybe<Scalars['String']>>>
  postalCode?: Maybe<Scalars['String']>
  state?: Maybe<Scalars['String']>
  stateName?: Maybe<Scalars['String']>
  text?: Maybe<Scalars['String']>
  to?: Maybe<Scalars['Date']>
  type?: Maybe<Scalars['String']>
  use?: Maybe<Scalars['String']>
}

export type AddressInput = {
  city?: InputMaybe<Scalars['String']>
  country?: InputMaybe<Scalars['String']>
  district?: InputMaybe<Scalars['String']>
  from?: InputMaybe<Scalars['Date']>
  line?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  postalCode?: InputMaybe<Scalars['String']>
  state?: InputMaybe<Scalars['String']>
  text?: InputMaybe<Scalars['String']>
  to?: InputMaybe<Scalars['Date']>
  type?: InputMaybe<Scalars['String']>
  use?: InputMaybe<Scalars['String']>
}

export type AdvancedSeachParameters = {
  __typename?: 'AdvancedSeachParameters'
  childDoB?: Maybe<Scalars['String']>
  childDoBEnd?: Maybe<Scalars['String']>
  childDoBStart?: Maybe<Scalars['String']>
  childFirstNames?: Maybe<Scalars['String']>
  childGender?: Maybe<Scalars['String']>
  childLastName?: Maybe<Scalars['String']>
  compositionType?: Maybe<Array<Maybe<Scalars['String']>>>
  contactNumber?: Maybe<Scalars['String']>
  dateOfEvent?: Maybe<Scalars['String']>
  dateOfEventEnd?: Maybe<Scalars['String']>
  dateOfEventStart?: Maybe<Scalars['String']>
  dateOfRegistration?: Maybe<Scalars['String']>
  dateOfRegistrationEnd?: Maybe<Scalars['String']>
  dateOfRegistrationStart?: Maybe<Scalars['String']>
  deceasedDoB?: Maybe<Scalars['String']>
  deceasedDoBEnd?: Maybe<Scalars['String']>
  deceasedDoBStart?: Maybe<Scalars['String']>
  deceasedFamilyName?: Maybe<Scalars['String']>
  deceasedFirstNames?: Maybe<Scalars['String']>
  deceasedGender?: Maybe<Scalars['String']>
  deceasedIdentifier?: Maybe<Scalars['String']>
  declarationJurisdictionId?: Maybe<Scalars['String']>
  declarationLocationId?: Maybe<Scalars['String']>
  event?: Maybe<Event>
  eventCountry?: Maybe<Scalars['String']>
  eventLocationId?: Maybe<Scalars['String']>
  eventLocationLevel1?: Maybe<Scalars['String']>
  eventLocationLevel2?: Maybe<Scalars['String']>
  eventLocationLevel3?: Maybe<Scalars['String']>
  eventLocationLevel4?: Maybe<Scalars['String']>
  eventLocationLevel5?: Maybe<Scalars['String']>
  fatherDoB?: Maybe<Scalars['String']>
  fatherDoBEnd?: Maybe<Scalars['String']>
  fatherDoBStart?: Maybe<Scalars['String']>
  fatherFamilyName?: Maybe<Scalars['String']>
  fatherFirstNames?: Maybe<Scalars['String']>
  fatherIdentifier?: Maybe<Scalars['String']>
  informantDoB?: Maybe<Scalars['String']>
  informantDoBEnd?: Maybe<Scalars['String']>
  informantDoBStart?: Maybe<Scalars['String']>
  informantFamilyName?: Maybe<Scalars['String']>
  informantFirstNames?: Maybe<Scalars['String']>
  informantIdentifier?: Maybe<Scalars['String']>
  motherDoB?: Maybe<Scalars['String']>
  motherDoBEnd?: Maybe<Scalars['String']>
  motherDoBStart?: Maybe<Scalars['String']>
  motherFamilyName?: Maybe<Scalars['String']>
  motherFirstNames?: Maybe<Scalars['String']>
  motherIdentifier?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  nationalId?: Maybe<Scalars['String']>
  registrationNumber?: Maybe<Scalars['String']>
  registrationStatuses?: Maybe<Array<Maybe<Scalars['String']>>>
  trackingId?: Maybe<Scalars['String']>
}

export type AdvancedSearchParametersInput = {
  brideDoB?: InputMaybe<Scalars['String']>
  brideDoBEnd?: InputMaybe<Scalars['String']>
  brideDoBStart?: InputMaybe<Scalars['String']>
  brideFamilyName?: InputMaybe<Scalars['String']>
  brideFirstNames?: InputMaybe<Scalars['String']>
  brideIdentifier?: InputMaybe<Scalars['String']>
  childDoB?: InputMaybe<Scalars['String']>
  childDoBEnd?: InputMaybe<Scalars['String']>
  childDoBStart?: InputMaybe<Scalars['String']>
  childFirstNames?: InputMaybe<Scalars['String']>
  childGender?: InputMaybe<Scalars['String']>
  childLastName?: InputMaybe<Scalars['String']>
  compositionType?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  contactNumber?: InputMaybe<Scalars['String']>
  dateOfEvent?: InputMaybe<Scalars['String']>
  dateOfEventEnd?: InputMaybe<Scalars['String']>
  dateOfEventStart?: InputMaybe<Scalars['String']>
  dateOfMarriage?: InputMaybe<Scalars['String']>
  dateOfRegistration?: InputMaybe<Scalars['String']>
  dateOfRegistrationEnd?: InputMaybe<Scalars['String']>
  dateOfRegistrationStart?: InputMaybe<Scalars['String']>
  deceasedDoB?: InputMaybe<Scalars['String']>
  deceasedDoBEnd?: InputMaybe<Scalars['String']>
  deceasedDoBStart?: InputMaybe<Scalars['String']>
  deceasedFamilyName?: InputMaybe<Scalars['String']>
  deceasedFirstNames?: InputMaybe<Scalars['String']>
  deceasedGender?: InputMaybe<Scalars['String']>
  deceasedIdentifier?: InputMaybe<Scalars['String']>
  declarationJurisdictionId?: InputMaybe<Scalars['String']>
  declarationLocationId?: InputMaybe<Scalars['String']>
  event?: InputMaybe<Event>
  eventCountry?: InputMaybe<Scalars['String']>
  eventLocationId?: InputMaybe<Scalars['String']>
  eventLocationLevel1?: InputMaybe<Scalars['String']>
  eventLocationLevel2?: InputMaybe<Scalars['String']>
  eventLocationLevel3?: InputMaybe<Scalars['String']>
  eventLocationLevel4?: InputMaybe<Scalars['String']>
  eventLocationLevel5?: InputMaybe<Scalars['String']>
  fatherDoB?: InputMaybe<Scalars['String']>
  fatherDoBEnd?: InputMaybe<Scalars['String']>
  fatherDoBStart?: InputMaybe<Scalars['String']>
  fatherFamilyName?: InputMaybe<Scalars['String']>
  fatherFirstNames?: InputMaybe<Scalars['String']>
  fatherIdentifier?: InputMaybe<Scalars['String']>
  groomDoB?: InputMaybe<Scalars['String']>
  groomDoBEnd?: InputMaybe<Scalars['String']>
  groomDoBStart?: InputMaybe<Scalars['String']>
  groomFamilyName?: InputMaybe<Scalars['String']>
  groomFirstNames?: InputMaybe<Scalars['String']>
  groomIdentifier?: InputMaybe<Scalars['String']>
  informantDoB?: InputMaybe<Scalars['String']>
  informantDoBEnd?: InputMaybe<Scalars['String']>
  informantDoBStart?: InputMaybe<Scalars['String']>
  informantFamilyName?: InputMaybe<Scalars['String']>
  informantFirstNames?: InputMaybe<Scalars['String']>
  informantIdentifier?: InputMaybe<Scalars['String']>
  motherDoB?: InputMaybe<Scalars['String']>
  motherDoBEnd?: InputMaybe<Scalars['String']>
  motherDoBStart?: InputMaybe<Scalars['String']>
  motherFamilyName?: InputMaybe<Scalars['String']>
  motherFirstNames?: InputMaybe<Scalars['String']>
  motherIdentifier?: InputMaybe<Scalars['String']>
  name?: InputMaybe<Scalars['String']>
  nationalId?: InputMaybe<Scalars['String']>
  recordId?: InputMaybe<Scalars['ID']>
  registrationNumber?: InputMaybe<Scalars['String']>
  registrationStatuses?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  trackingId?: InputMaybe<Scalars['String']>
}

export type ApplicationConfiguration = {
  __typename?: 'ApplicationConfiguration'
  APPLICATION_NAME?: Maybe<Scalars['String']>
  BIRTH?: Maybe<Birth>
  COUNTRY_LOGO?: Maybe<CountryLogo>
  CURRENCY?: Maybe<Currency>
  DATE_OF_BIRTH_UNKNOWN?: Maybe<Scalars['Boolean']>
  DEATH?: Maybe<Death>
  EXTERNAL_VALIDATION_WORKQUEUE?: Maybe<Scalars['Boolean']>
  FIELD_AGENT_AUDIT_LOCATIONS?: Maybe<Scalars['String']>
  INFORMANT_NOTIFICATION_DELIVERY_METHOD?: Maybe<Scalars['String']>
  INFORMANT_SIGNATURE?: Maybe<Scalars['Boolean']>
  INFORMANT_SIGNATURE_REQUIRED?: Maybe<Scalars['Boolean']>
  LOGIN_BACKGROUND?: Maybe<LoginBackground>
  MARRIAGE?: Maybe<Marriage>
  MARRIAGE_REGISTRATION?: Maybe<Scalars['Boolean']>
  NID_NUMBER_PATTERN?: Maybe<Scalars['String']>
  PHONE_NUMBER_PATTERN?: Maybe<Scalars['String']>
  USER_NOTIFICATION_DELIVERY_METHOD?: Maybe<Scalars['String']>
}

export type ApplicationConfigurationInput = {
  APPLICATION_NAME?: InputMaybe<Scalars['String']>
  BIRTH?: InputMaybe<BirthInput>
  COUNTRY_LOGO?: InputMaybe<CountryLogoInput>
  CURRENCY?: InputMaybe<CurrencyInput>
  DATE_OF_BIRTH_UNKNOWN?: InputMaybe<Scalars['Boolean']>
  DEATH?: InputMaybe<DeathInput>
  EXTERNAL_VALIDATION_WORKQUEUE?: InputMaybe<Scalars['Boolean']>
  FIELD_AGENT_AUDIT_LOCATIONS?: InputMaybe<Scalars['String']>
  INFORMANT_NOTIFICATION_DELIVERY_METHOD?: InputMaybe<Scalars['String']>
  INFORMANT_SIGNATURE?: InputMaybe<Scalars['Boolean']>
  INFORMANT_SIGNATURE_REQUIRED?: InputMaybe<Scalars['Boolean']>
  LOGIN_BACKGROUND?: InputMaybe<LoginBackgroundInput>
  MARRIAGE?: InputMaybe<MarriageInput>
  NID_NUMBER_PATTERN?: InputMaybe<Scalars['String']>
  PHONE_NUMBER_PATTERN?: InputMaybe<Scalars['String']>
  USER_NOTIFICATION_DELIVERY_METHOD?: InputMaybe<Scalars['String']>
}

export type AssignmentData = {
  __typename?: 'AssignmentData'
  avatarURL: Scalars['String']
  firstName?: Maybe<Scalars['String']>
  lastName?: Maybe<Scalars['String']>
  officeName?: Maybe<Scalars['String']>
  userId?: Maybe<Scalars['String']>
}

export type Attachment = {
  __typename?: 'Attachment'
  _fhirID?: Maybe<Scalars['ID']>
  contentType?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['Date']>
  data?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  id: Scalars['ID']
  originalFileName?: Maybe<Scalars['String']>
  status?: Maybe<Scalars['String']>
  subject?: Maybe<Scalars['String']>
  systemFileName?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
  uri?: Maybe<Scalars['String']>
}

export type AttachmentInput = {
  _fhirID?: InputMaybe<Scalars['ID']>
  contentType?: InputMaybe<Scalars['String']>
  createdAt?: InputMaybe<Scalars['Date']>
  data?: InputMaybe<Scalars['String']>
  description?: InputMaybe<Scalars['String']>
  originalFileName?: InputMaybe<Scalars['String']>
  status?: InputMaybe<Scalars['String']>
  subject?: InputMaybe<Scalars['String']>
  systemFileName?: InputMaybe<Scalars['String']>
  type?: InputMaybe<Scalars['String']>
  uri?: InputMaybe<Scalars['String']>
}

export type AuditLogItemBase = {
  action: Scalars['String']
  ipAddress: Scalars['String']
  practitionerId: Scalars['String']
  time: Scalars['String']
  userAgent: Scalars['String']
}

export type Avatar = {
  __typename?: 'Avatar'
  data: Scalars['String']
  type: Scalars['String']
}

export type AvatarInput = {
  data: Scalars['String']
  type: Scalars['String']
}

export type Birth = {
  __typename?: 'Birth'
  FEE?: Maybe<BirthFee>
  LATE_REGISTRATION_TARGET?: Maybe<Scalars['Int']>
  PRINT_IN_ADVANCE?: Maybe<Scalars['Boolean']>
  REGISTRATION_TARGET?: Maybe<Scalars['Int']>
}

export type BirthEventSearchSet = EventSearchSet & {
  __typename?: 'BirthEventSearchSet'
  childGender?: Maybe<Scalars['String']>
  childName?: Maybe<Array<Maybe<HumanName>>>
  dateOfBirth?: Maybe<Scalars['Date']>
  fatherDateOfBirth?: Maybe<Scalars['String']>
  fatherIdentifier?: Maybe<Scalars['String']>
  fathersFirstName?: Maybe<Scalars['String']>
  fathersLastName?: Maybe<Scalars['String']>
  id: Scalars['ID']
  motherDateOfBirth?: Maybe<Scalars['String']>
  motherIdentifier?: Maybe<Scalars['String']>
  mothersFirstName?: Maybe<Scalars['String']>
  mothersLastName?: Maybe<Scalars['String']>
  operationHistories?: Maybe<Array<Maybe<OperationHistorySearchSet>>>
  placeOfBirth?: Maybe<Scalars['String']>
  registration?: Maybe<RegistrationSearchSet>
  type?: Maybe<Scalars['String']>
}

export type BirthFee = {
  __typename?: 'BirthFee'
  DELAYED?: Maybe<Scalars['Float']>
  LATE?: Maybe<Scalars['Float']>
  ON_TIME?: Maybe<Scalars['Float']>
}

export type BirthFeeInput = {
  DELAYED?: InputMaybe<Scalars['Float']>
  LATE?: InputMaybe<Scalars['Float']>
  ON_TIME?: InputMaybe<Scalars['Float']>
}

export type BirthInput = {
  FEE?: InputMaybe<BirthFeeInput>
  LATE_REGISTRATION_TARGET?: InputMaybe<Scalars['Int']>
  PRINT_IN_ADVANCE?: InputMaybe<Scalars['Boolean']>
  REGISTRATION_TARGET?: InputMaybe<Scalars['Int']>
}

export type BirthRegResultSet = {
  __typename?: 'BirthRegResultSet'
  results?: Maybe<Array<Maybe<BirthRegistration>>>
  totalItems?: Maybe<Scalars['Int']>
}

export type BirthRegistration = EventRegistration & {
  __typename?: 'BirthRegistration'
  _fhirIDMap?: Maybe<Scalars['Map']>
  attendantAtBirth?: Maybe<Scalars['String']>
  birthType?: Maybe<Scalars['String']>
  child?: Maybe<Person>
  childrenBornAliveToMother?: Maybe<Scalars['Int']>
  createdAt?: Maybe<Scalars['Date']>
  eventLocation?: Maybe<Location>
  father?: Maybe<Person>
  foetalDeathsToMother?: Maybe<Scalars['Int']>
  history?: Maybe<Array<Maybe<History>>>
  id: Scalars['ID']
  informant?: Maybe<RelatedPerson>
  lastPreviousLiveBirth?: Maybe<Scalars['Date']>
  mother?: Maybe<Person>
  otherAttendantAtBirth?: Maybe<Scalars['String']>
  questionnaire?: Maybe<Array<Maybe<QuestionnaireQuestion>>>
  registration?: Maybe<Registration>
  updatedAt?: Maybe<Scalars['Date']>
  weightAtBirth?: Maybe<Scalars['Float']>
}

export type BirthRegistrationInput = {
  _fhirIDMap?: InputMaybe<Scalars['Map']>
  attendantAtBirth?: InputMaybe<Scalars['String']>
  birthType?: InputMaybe<Scalars['String']>
  child?: InputMaybe<PersonInput>
  childrenBornAliveToMother?: InputMaybe<Scalars['Int']>
  createdAt?: InputMaybe<Scalars['Date']>
  eventLocation?: InputMaybe<LocationInput>
  father?: InputMaybe<PersonInput>
  foetalDeathsToMother?: InputMaybe<Scalars['Int']>
  informant?: InputMaybe<RelatedPersonInput>
  lastPreviousLiveBirth?: InputMaybe<Scalars['Date']>
  mother?: InputMaybe<PersonInput>
  otherAttendantAtBirth?: InputMaybe<Scalars['String']>
  questionnaire?: InputMaybe<Array<InputMaybe<QuestionnaireQuestionInput>>>
  registration?: InputMaybe<RegistrationInput>
  updatedAt?: InputMaybe<Scalars['Date']>
  weightAtBirth?: InputMaybe<Scalars['Float']>
}

export type BookMarkedSearches = {
  __typename?: 'BookMarkedSearches'
  searchList?: Maybe<Array<BookmarkedSeachItem>>
}

export type BookmarkSearchInput = {
  name: Scalars['String']
  parameters: AdvancedSearchParametersInput
  userId: Scalars['String']
}

export type BookmarkedSeachItem = {
  __typename?: 'BookmarkedSeachItem'
  name: Scalars['String']
  parameters: AdvancedSeachParameters
  searchId: Scalars['String']
}

export type Certificate = {
  __typename?: 'Certificate'
  collector?: Maybe<RelatedPerson>
  data?: Maybe<Scalars['String']>
  hasShowedVerifiedDocument?: Maybe<Scalars['Boolean']>
  payments?: Maybe<Array<Maybe<Payment>>>
}

export type CertificateInput = {
  collector?: InputMaybe<RelatedPersonInput>
  data?: InputMaybe<Scalars['String']>
  hasShowedVerifiedDocument?: InputMaybe<Scalars['Boolean']>
  payments?: InputMaybe<Array<InputMaybe<PaymentInput>>>
}

export type CertificateSvg = {
  __typename?: 'CertificateSVG'
  event: Event
  id: Scalars['ID']
  status: CertificateStatus
  svgCode: Scalars['String']
  svgDateCreated: Scalars['String']
  svgDateUpdated: Scalars['String']
  svgFilename: Scalars['String']
  user: Scalars['String']
}

export type CertificateSvgInput = {
  event: Event
  id?: InputMaybe<Scalars['ID']>
  status: CertificateStatus
  svgCode: Scalars['String']
  svgDateCreated?: InputMaybe<Scalars['Int']>
  svgDateUpdated?: InputMaybe<Scalars['Int']>
  svgFilename: Scalars['String']
  user: Scalars['String']
}

export enum CertificateStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE'
}

export type CertificationMetric = {
  __typename?: 'CertificationMetric'
  eventType: Scalars['String']
  total: Scalars['Float']
}

export type Comment = {
  __typename?: 'Comment'
  comment?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['Date']>
  id: Scalars['ID']
  user?: Maybe<User>
}

export type CommentInput = {
  comment?: InputMaybe<Scalars['String']>
  createdAt?: InputMaybe<Scalars['Date']>
  user?: InputMaybe<UserInput>
}

export type ComparisonInput = {
  eq?: InputMaybe<Scalars['String']>
  gt?: InputMaybe<Scalars['String']>
  gte?: InputMaybe<Scalars['String']>
  in?: InputMaybe<Array<Scalars['String']>>
  lt?: InputMaybe<Scalars['String']>
  lte?: InputMaybe<Scalars['String']>
  ne?: InputMaybe<Scalars['String']>
  nin?: InputMaybe<Array<Scalars['String']>>
}

export type ContactPoint = {
  __typename?: 'ContactPoint'
  system?: Maybe<Scalars['String']>
  use?: Maybe<Scalars['String']>
  value?: Maybe<Scalars['String']>
}

export type ContactPointInput = {
  system?: InputMaybe<Scalars['String']>
  use?: InputMaybe<Scalars['String']>
  value?: InputMaybe<Scalars['String']>
}

export type CorrectionInput = {
  attestedAndCopied?: InputMaybe<Scalars['Boolean']>
  data?: InputMaybe<Scalars['String']>
  hasShowedVerifiedDocument?: InputMaybe<Scalars['Boolean']>
  location?: InputMaybe<LocationInput>
  noSupportingDocumentationRequired?: InputMaybe<Scalars['Boolean']>
  note?: InputMaybe<Scalars['String']>
  otherReason?: InputMaybe<Scalars['String']>
  payments?: InputMaybe<Array<InputMaybe<PaymentInput>>>
  reason?: InputMaybe<Scalars['String']>
  requester?: InputMaybe<Scalars['ID']>
  values?: InputMaybe<Array<InputMaybe<CorrectionValueInput>>>
}

export type CorrectionMetric = {
  __typename?: 'CorrectionMetric'
  reason: Scalars['String']
  total: Scalars['Float']
}

export type CorrectionValueInput = {
  fieldName?: InputMaybe<Scalars['String']>
  newValue?: InputMaybe<Scalars['String']>
  oldValue?: InputMaybe<Scalars['String']>
  section?: InputMaybe<Scalars['String']>
}

export type CountryLogo = {
  __typename?: 'CountryLogo'
  file?: Maybe<Scalars['String']>
  fileName?: Maybe<Scalars['String']>
}

export type CountryLogoInput = {
  file?: InputMaybe<Scalars['String']>
  fileName?: InputMaybe<Scalars['String']>
}

export type CreatedIds = {
  __typename?: 'CreatedIds'
  compositionId?: Maybe<Scalars['String']>
  isPotentiallyDuplicate?: Maybe<Scalars['Boolean']>
  trackingId?: Maybe<Scalars['String']>
}

export type Currency = {
  __typename?: 'Currency'
  isoCode?: Maybe<Scalars['String']>
  languagesAndCountry?: Maybe<Array<Maybe<Scalars['String']>>>
}

export type CurrencyInput = {
  isoCode?: InputMaybe<Scalars['String']>
  languagesAndCountry?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
}

export type Death = {
  __typename?: 'Death'
  FEE?: Maybe<DeathFee>
  PRINT_IN_ADVANCE?: Maybe<Scalars['Boolean']>
  REGISTRATION_TARGET?: Maybe<Scalars['Int']>
}

export type DeathEventSearchSet = EventSearchSet & {
  __typename?: 'DeathEventSearchSet'
  dateOfDeath?: Maybe<Scalars['Date']>
  deceasedGender?: Maybe<Scalars['String']>
  deceasedName?: Maybe<Array<Maybe<HumanName>>>
  id: Scalars['ID']
  operationHistories?: Maybe<Array<Maybe<OperationHistorySearchSet>>>
  registration?: Maybe<RegistrationSearchSet>
  type?: Maybe<Scalars['String']>
}

export type DeathFee = {
  __typename?: 'DeathFee'
  DELAYED?: Maybe<Scalars['Float']>
  ON_TIME?: Maybe<Scalars['Float']>
}

export type DeathFeeInput = {
  DELAYED?: InputMaybe<Scalars['Float']>
  ON_TIME?: InputMaybe<Scalars['Float']>
}

export type DeathInput = {
  FEE?: InputMaybe<DeathFeeInput>
  PRINT_IN_ADVANCE?: InputMaybe<Scalars['Boolean']>
  REGISTRATION_TARGET?: InputMaybe<Scalars['Int']>
}

export type DeathRegistration = EventRegistration & {
  __typename?: 'DeathRegistration'
  _fhirIDMap?: Maybe<Scalars['Map']>
  causeOfDeath?: Maybe<Scalars['String']>
  causeOfDeathEstablished?: Maybe<Scalars['String']>
  causeOfDeathMethod?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['Date']>
  deathDescription?: Maybe<Scalars['String']>
  deceased?: Maybe<Person>
  eventLocation?: Maybe<Location>
  father?: Maybe<Person>
  femaleDependentsOfDeceased?: Maybe<Scalars['Float']>
  history?: Maybe<Array<Maybe<History>>>
  id: Scalars['ID']
  informant?: Maybe<RelatedPerson>
  maleDependentsOfDeceased?: Maybe<Scalars['Float']>
  mannerOfDeath?: Maybe<Scalars['String']>
  medicalPractitioner?: Maybe<MedicalPractitioner>
  mother?: Maybe<Person>
  questionnaire?: Maybe<Array<Maybe<QuestionnaireQuestion>>>
  registration?: Maybe<Registration>
  spouse?: Maybe<Person>
  updatedAt?: Maybe<Scalars['Date']>
}

export type DeathRegistrationInput = {
  _fhirIDMap?: InputMaybe<Scalars['Map']>
  causeOfDeath?: InputMaybe<Scalars['String']>
  causeOfDeathEstablished?: InputMaybe<Scalars['String']>
  causeOfDeathMethod?: InputMaybe<Scalars['String']>
  createdAt?: InputMaybe<Scalars['Date']>
  deathDescription?: InputMaybe<Scalars['String']>
  deceased?: InputMaybe<PersonInput>
  eventLocation?: InputMaybe<LocationInput>
  father?: InputMaybe<PersonInput>
  femaleDependentsOfDeceased?: InputMaybe<Scalars['Float']>
  informant?: InputMaybe<RelatedPersonInput>
  maleDependentsOfDeceased?: InputMaybe<Scalars['Float']>
  mannerOfDeath?: InputMaybe<Scalars['String']>
  medicalPractitioner?: InputMaybe<MedicalPractitionerInput>
  mother?: InputMaybe<PersonInput>
  questionnaire?: InputMaybe<Array<InputMaybe<QuestionnaireQuestionInput>>>
  registration?: InputMaybe<RegistrationInput>
  spouse?: InputMaybe<PersonInput>
  updatedAt?: InputMaybe<Scalars['Date']>
}

export type Deceased = {
  __typename?: 'Deceased'
  deathDate?: Maybe<Scalars['String']>
  deceased?: Maybe<Scalars['Boolean']>
}

export type DeceasedInput = {
  deathDate?: InputMaybe<Scalars['String']>
  deceased?: InputMaybe<Scalars['Boolean']>
}

export type DeclarationsStartedMetrics = {
  __typename?: 'DeclarationsStartedMetrics'
  fieldAgentDeclarations: Scalars['Int']
  hospitalDeclarations: Scalars['Int']
  officeDeclarations: Scalars['Int']
}

export type Dummy = {
  __typename?: 'Dummy'
  dummy: Scalars['String']
}

export type DuplicatesInfo = {
  __typename?: 'DuplicatesInfo'
  compositionId?: Maybe<Scalars['ID']>
  trackingId?: Maybe<Scalars['String']>
}

export type Estimation = {
  __typename?: 'Estimation'
  femaleEstimation: Scalars['Int']
  locationId: Scalars['String']
  locationLevel: Scalars['String']
  maleEstimation: Scalars['Int']
  totalEstimation: Scalars['Int']
}

export enum Event {
  Birth = 'birth',
  Death = 'death',
  Marriage = 'marriage'
}

export type EventMetrics = {
  __typename?: 'EventMetrics'
  eventLocationType: Scalars['String']
  gender: Scalars['String']
  practitionerRole: Scalars['String']
  timeLabel: Scalars['String']
  total: Scalars['Int']
}

export type EventMetricsByLocation = {
  __typename?: 'EventMetricsByLocation'
  delayed: Scalars['Int']
  healthFacility: Scalars['Int']
  home: Scalars['Int']
  late: Scalars['Int']
  location: Location
  total: Scalars['Int']
}

export type EventMetricsByRegistrar = {
  __typename?: 'EventMetricsByRegistrar'
  delayed: Scalars['Int']
  late: Scalars['Int']
  registrarPractitioner?: Maybe<User>
  total: Scalars['Int']
}

export type EventMetricsByTime = {
  __typename?: 'EventMetricsByTime'
  delayed: Scalars['Int']
  healthFacility: Scalars['Int']
  home: Scalars['Int']
  late: Scalars['Int']
  month: Scalars['String']
  time: Scalars['String']
  total: Scalars['Int']
}

export type EventProgressData = {
  __typename?: 'EventProgressData'
  timeInProgress?: Maybe<Scalars['Int']>
  timeInReadyForReview?: Maybe<Scalars['Int']>
  timeInReadyToPrint?: Maybe<Scalars['Int']>
  timeInRequiresUpdates?: Maybe<Scalars['Int']>
  timeInWaitingForApproval?: Maybe<Scalars['Int']>
  timeInWaitingForBRIS?: Maybe<Scalars['Int']>
}

export type EventProgressResultSet = {
  __typename?: 'EventProgressResultSet'
  results?: Maybe<Array<Maybe<EventProgressSet>>>
  totalItems?: Maybe<Scalars['Int']>
}

export type EventProgressSet = {
  __typename?: 'EventProgressSet'
  dateOfEvent?: Maybe<Scalars['Date']>
  id: Scalars['ID']
  name?: Maybe<Array<Maybe<HumanName>>>
  progressReport?: Maybe<EventProgressData>
  registration?: Maybe<RegistrationSearchSet>
  startedAt?: Maybe<Scalars['Date']>
  startedBy?: Maybe<User>
  startedByFacility?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

export type EventRegistration = {
  createdAt?: Maybe<Scalars['Date']>
  history?: Maybe<Array<Maybe<History>>>
  id: Scalars['ID']
  registration?: Maybe<Registration>
}

export type EventSearchResultSet = {
  __typename?: 'EventSearchResultSet'
  results?: Maybe<Array<Maybe<EventSearchSet>>>
  totalItems?: Maybe<Scalars['Int']>
}

export type EventSearchSet = {
  id: Scalars['ID']
  operationHistories?: Maybe<Array<Maybe<OperationHistorySearchSet>>>
  registration?: Maybe<RegistrationSearchSet>
  type?: Maybe<Scalars['String']>
}

export type History = {
  __typename?: 'History'
  action?: Maybe<RegAction>
  certificates?: Maybe<Array<Maybe<Certificate>>>
  comments?: Maybe<Array<Maybe<Comment>>>
  date?: Maybe<Scalars['Date']>
  dhis2Notification?: Maybe<Scalars['Boolean']>
  duplicateOf?: Maybe<Scalars['String']>
  hasShowedVerifiedDocument?: Maybe<Scalars['Boolean']>
  input?: Maybe<Array<Maybe<InputOutput>>>
  ipAddress?: Maybe<Scalars['String']>
  location?: Maybe<Location>
  office?: Maybe<Location>
  otherReason?: Maybe<Scalars['String']>
  output?: Maybe<Array<Maybe<InputOutput>>>
  potentialDuplicates?: Maybe<Array<Scalars['String']>>
  reason?: Maybe<Scalars['String']>
  regStatus?: Maybe<RegStatus>
  requester?: Maybe<Scalars['String']>
  signature?: Maybe<Signature>
  statusReason?: Maybe<StatusReason>
  system?: Maybe<IntegratedSystem>
  user?: Maybe<User>
}

export type HumanName = {
  __typename?: 'HumanName'
  familyName?: Maybe<Scalars['String']>
  firstNames?: Maybe<Scalars['String']>
  marriedLastName?: Maybe<Scalars['String']>
  use?: Maybe<Scalars['String']>
}

export type HumanNameInput = {
  familyName?: InputMaybe<Scalars['String']>
  firstNames?: InputMaybe<Scalars['String']>
  marriedLastName?: InputMaybe<Scalars['String']>
  use?: InputMaybe<Scalars['String']>
}

export type Identifier = {
  __typename?: 'Identifier'
  system?: Maybe<Scalars['String']>
  value?: Maybe<Scalars['String']>
}

export type IdentityInput = {
  fieldsModifiedByIdentity?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  id?: InputMaybe<Scalars['ID']>
  otherType?: InputMaybe<Scalars['String']>
  type?: InputMaybe<Scalars['String']>
}

export type IdentityType = {
  __typename?: 'IdentityType'
  fieldsModifiedByIdentity?: Maybe<Array<Maybe<Scalars['String']>>>
  id?: Maybe<Scalars['ID']>
  otherType?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

export enum ImageFit {
  Fill = 'FILL',
  Tile = 'TILE'
}

export type InputOutput = {
  __typename?: 'InputOutput'
  valueCode?: Maybe<Scalars['String']>
  valueId?: Maybe<Scalars['String']>
  valueString?: Maybe<Scalars['String']>
}

export type IntegratedSystem = {
  __typename?: 'IntegratedSystem'
  name?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
  username?: Maybe<Scalars['String']>
}

export enum IntegratingSystemType {
  Mosip = 'MOSIP',
  Osia = 'OSIA',
  Other = 'OTHER'
}

export type LabelInput = {
  label: Scalars['String']
  lang: Scalars['String']
}

export type LocalRegistrar = {
  __typename?: 'LocalRegistrar'
  name: Array<Maybe<HumanName>>
  role: SystemRoleType
  signature?: Maybe<Signature>
}

export type Location = {
  __typename?: 'Location'
  _fhirID?: Maybe<Scalars['ID']>
  address?: Maybe<Address>
  alias?: Maybe<Array<Scalars['String']>>
  altitude?: Maybe<Scalars['Float']>
  description?: Maybe<Scalars['String']>
  geoData?: Maybe<Scalars['String']>
  id: Scalars['ID']
  identifier?: Maybe<Array<Identifier>>
  latitude?: Maybe<Scalars['Float']>
  longitude?: Maybe<Scalars['Float']>
  name?: Maybe<Scalars['String']>
  partOf?: Maybe<Scalars['String']>
  status?: Maybe<Scalars['String']>
  telecom?: Maybe<Array<Maybe<ContactPoint>>>
  type?: Maybe<Scalars['String']>
}

export type LocationInput = {
  _fhirID?: InputMaybe<Scalars['ID']>
  address?: InputMaybe<AddressInput>
  alias?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  altitude?: InputMaybe<Scalars['Float']>
  description?: InputMaybe<Scalars['String']>
  geoData?: InputMaybe<Scalars['String']>
  identifier?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>
  latitude?: InputMaybe<Scalars['Float']>
  longitude?: InputMaybe<Scalars['Float']>
  name?: InputMaybe<Scalars['String']>
  partOf?: InputMaybe<Scalars['String']>
  status?: InputMaybe<Scalars['String']>
  telecom?: InputMaybe<Array<InputMaybe<ContactPointInput>>>
  type?: InputMaybe<Scalars['String']>
}

export type LocationStatisticsResponse = {
  __typename?: 'LocationStatisticsResponse'
  offices: Scalars['Int']
  population?: Maybe<Scalars['Int']>
  registrars: Scalars['Int']
}

export type LocationWiseEstimationMetric = {
  __typename?: 'LocationWiseEstimationMetric'
  estimated: Scalars['Int']
  locationId: Scalars['String']
  locationName: Scalars['String']
  total: Scalars['Int']
  within1Year: Scalars['Int']
  within5Years: Scalars['Int']
  withinTarget: Scalars['Int']
}

export type LoginBackground = {
  __typename?: 'LoginBackground'
  backgroundColor?: Maybe<Scalars['String']>
  backgroundImage?: Maybe<Scalars['String']>
  imageFit?: Maybe<ImageFit>
}

export type LoginBackgroundInput = {
  backgroundColor?: InputMaybe<Scalars['String']>
  backgroundImage?: InputMaybe<Scalars['String']>
  imageFit?: InputMaybe<ImageFit>
}

export type Marriage = {
  __typename?: 'Marriage'
  FEE?: Maybe<MarriageFee>
  PRINT_IN_ADVANCE?: Maybe<Scalars['Boolean']>
  REGISTRATION_TARGET?: Maybe<Scalars['Int']>
}

export type MarriageEventSearchSet = EventSearchSet & {
  __typename?: 'MarriageEventSearchSet'
  brideIdentifier?: Maybe<Scalars['String']>
  brideName?: Maybe<Array<Maybe<HumanName>>>
  dateOfMarriage?: Maybe<Scalars['Date']>
  groomIdentifier?: Maybe<Scalars['String']>
  groomName?: Maybe<Array<Maybe<HumanName>>>
  id: Scalars['ID']
  operationHistories?: Maybe<Array<Maybe<OperationHistorySearchSet>>>
  registration?: Maybe<RegistrationSearchSet>
  type?: Maybe<Scalars['String']>
}

export type MarriageFee = {
  __typename?: 'MarriageFee'
  DELAYED?: Maybe<Scalars['Float']>
  ON_TIME?: Maybe<Scalars['Float']>
}

export type MarriageFeeInput = {
  DELAYED?: InputMaybe<Scalars['Float']>
  ON_TIME?: InputMaybe<Scalars['Float']>
}

export type MarriageInput = {
  FEE?: InputMaybe<MarriageFeeInput>
  PRINT_IN_ADVANCE?: InputMaybe<Scalars['Boolean']>
  REGISTRATION_TARGET?: InputMaybe<Scalars['Int']>
}

export type MarriageRegistration = EventRegistration & {
  __typename?: 'MarriageRegistration'
  _fhirIDMap?: Maybe<Scalars['Map']>
  bride?: Maybe<Person>
  createdAt?: Maybe<Scalars['Date']>
  eventLocation?: Maybe<Location>
  groom?: Maybe<Person>
  history?: Maybe<Array<Maybe<History>>>
  id: Scalars['ID']
  informant?: Maybe<RelatedPerson>
  questionnaire?: Maybe<Array<Maybe<QuestionnaireQuestion>>>
  registration?: Maybe<Registration>
  typeOfMarriage?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['Date']>
  witnessOne?: Maybe<RelatedPerson>
  witnessTwo?: Maybe<RelatedPerson>
}

export type MarriageRegistrationInput = {
  _fhirIDMap?: InputMaybe<Scalars['Map']>
  bride?: InputMaybe<PersonInput>
  createdAt?: InputMaybe<Scalars['Date']>
  eventLocation?: InputMaybe<LocationInput>
  groom?: InputMaybe<PersonInput>
  informant?: InputMaybe<RelatedPersonInput>
  questionnaire?: InputMaybe<Array<InputMaybe<QuestionnaireQuestionInput>>>
  registration?: InputMaybe<RegistrationInput>
  typeOfMarriage?: InputMaybe<Scalars['String']>
  updatedAt?: InputMaybe<Scalars['Date']>
  witnessOne?: InputMaybe<RelatedPersonInput>
  witnessTwo?: InputMaybe<RelatedPersonInput>
}

export type MedicalPractitioner = {
  __typename?: 'MedicalPractitioner'
  lastVisitDate?: Maybe<Scalars['Date']>
  name?: Maybe<Scalars['String']>
  qualification?: Maybe<Scalars['String']>
}

export type MedicalPractitionerInput = {
  lastVisitDate?: InputMaybe<Scalars['Date']>
  name?: InputMaybe<Scalars['String']>
  qualification?: InputMaybe<Scalars['String']>
}

export type MixedTotalMetricsResult =
  | TotalMetricsByLocation
  | TotalMetricsByRegistrar
  | TotalMetricsByTime

export type MonthWiseEstimationMetric = {
  __typename?: 'MonthWiseEstimationMetric'
  estimated: Scalars['Int']
  month: Scalars['Int']
  total: Scalars['Int']
  within1Year: Scalars['Int']
  within5Years: Scalars['Int']
  withinTarget: Scalars['Int']
  year: Scalars['Int']
}

export type Mutation = {
  __typename?: 'Mutation'
  activateUser?: Maybe<Scalars['String']>
  auditUser?: Maybe<Scalars['String']>
  bookmarkAdvancedSearch?: Maybe<BookMarkedSearches>
  changeAvatar?: Maybe<Avatar>
  changeEmail?: Maybe<Scalars['String']>
  changePassword?: Maybe<Scalars['String']>
  changePhone?: Maybe<Scalars['String']>
  createBirthRegistration: CreatedIds
  createDeathRegistration: CreatedIds
  createMarriageRegistration: CreatedIds
  createNotification: Notification
  createOrUpdateCertificateSVG?: Maybe<CertificateSvg>
  createOrUpdateUser: User
  deactivateSystem?: Maybe<System>
  deleteSystem?: Maybe<System>
  markBirthAsCertified: Scalars['ID']
  markBirthAsIssued: Scalars['ID']
  markBirthAsRegistered: BirthRegistration
  markBirthAsValidated?: Maybe<Scalars['ID']>
  markBirthAsVerified?: Maybe<BirthRegistration>
  markDeathAsCertified: Scalars['ID']
  markDeathAsIssued: Scalars['ID']
  markDeathAsRegistered: DeathRegistration
  markDeathAsValidated?: Maybe<Scalars['ID']>
  markDeathAsVerified?: Maybe<DeathRegistration>
  markEventAsArchived: Scalars['ID']
  markEventAsDuplicate: Scalars['ID']
  markEventAsNotDuplicate: Scalars['ID']
  markEventAsReinstated?: Maybe<Reinstated>
  markEventAsUnassigned: Scalars['ID']
  markEventAsVoided: Scalars['ID']
  markMarriageAsCertified: Scalars['ID']
  markMarriageAsIssued: Scalars['ID']
  markMarriageAsRegistered: MarriageRegistration
  markMarriageAsValidated?: Maybe<Scalars['ID']>
  reactivateSystem?: Maybe<System>
  refreshSystemSecret?: Maybe<SystemSecret>
  registerSystem?: Maybe<SystemSecret>
  removeBookmarkedAdvancedSearch?: Maybe<BookMarkedSearches>
  requestBirthRegistrationCorrection: Scalars['ID']
  requestDeathRegistrationCorrection: Scalars['ID']
  requestMarriageRegistrationCorrection: Scalars['ID']
  resendInvite?: Maybe<Scalars['String']>
  resetPasswordInvite?: Maybe<Scalars['String']>
  toggleInformantSMSNotification?: Maybe<Array<SmsNotification>>
  updateApplicationConfig?: Maybe<ApplicationConfiguration>
  updateBirthRegistration: Scalars['ID']
  updateDeathRegistration: Scalars['ID']
  updatePermissions?: Maybe<System>
  updateRole: Response
  usernameReminder?: Maybe<Scalars['String']>
  voidNotification?: Maybe<Notification>
}

export type MutationActivateUserArgs = {
  password: Scalars['String']
  securityQNAs: Array<InputMaybe<SecurityQuestionAnswer>>
  userId: Scalars['String']
}

export type MutationAuditUserArgs = {
  action: Scalars['String']
  comment?: InputMaybe<Scalars['String']>
  reason: Scalars['String']
  userId: Scalars['String']
}

export type MutationBookmarkAdvancedSearchArgs = {
  bookmarkSearchInput: BookmarkSearchInput
}

export type MutationChangeAvatarArgs = {
  avatar: AvatarInput
  userId: Scalars['String']
}

export type MutationChangeEmailArgs = {
  email: Scalars['String']
  nonce: Scalars['String']
  userId: Scalars['String']
  verifyCode: Scalars['String']
}

export type MutationChangePasswordArgs = {
  existingPassword: Scalars['String']
  password: Scalars['String']
  userId: Scalars['String']
}

export type MutationChangePhoneArgs = {
  nonce: Scalars['String']
  phoneNumber: Scalars['String']
  userId: Scalars['String']
  verifyCode: Scalars['String']
}

export type MutationCreateBirthRegistrationArgs = {
  details: BirthRegistrationInput
}

export type MutationCreateDeathRegistrationArgs = {
  details: DeathRegistrationInput
}

export type MutationCreateMarriageRegistrationArgs = {
  details: MarriageRegistrationInput
}

export type MutationCreateNotificationArgs = {
  details: NotificationInput
}

export type MutationCreateOrUpdateCertificateSvgArgs = {
  certificateSVG: CertificateSvgInput
}

export type MutationCreateOrUpdateUserArgs = {
  user: UserInput
}

export type MutationDeactivateSystemArgs = {
  clientId: Scalars['ID']
}

export type MutationDeleteSystemArgs = {
  clientId: Scalars['ID']
}

export type MutationMarkBirthAsCertifiedArgs = {
  details: BirthRegistrationInput
  id: Scalars['ID']
}

export type MutationMarkBirthAsIssuedArgs = {
  details: BirthRegistrationInput
  id: Scalars['ID']
}

export type MutationMarkBirthAsRegisteredArgs = {
  details: BirthRegistrationInput
  id: Scalars['ID']
}

export type MutationMarkBirthAsValidatedArgs = {
  details?: InputMaybe<BirthRegistrationInput>
  id: Scalars['ID']
}

export type MutationMarkBirthAsVerifiedArgs = {
  details?: InputMaybe<BirthRegistrationInput>
  id: Scalars['ID']
}

export type MutationMarkDeathAsCertifiedArgs = {
  details: DeathRegistrationInput
  id: Scalars['ID']
}

export type MutationMarkDeathAsIssuedArgs = {
  details: DeathRegistrationInput
  id: Scalars['ID']
}

export type MutationMarkDeathAsRegisteredArgs = {
  details: DeathRegistrationInput
  id: Scalars['ID']
}

export type MutationMarkDeathAsValidatedArgs = {
  details?: InputMaybe<DeathRegistrationInput>
  id: Scalars['ID']
}

export type MutationMarkDeathAsVerifiedArgs = {
  details?: InputMaybe<DeathRegistrationInput>
  id: Scalars['ID']
}

export type MutationMarkEventAsArchivedArgs = {
  comment?: InputMaybe<Scalars['String']>
  duplicateTrackingId?: InputMaybe<Scalars['String']>
  id: Scalars['String']
  reason?: InputMaybe<Scalars['String']>
}

export type MutationMarkEventAsDuplicateArgs = {
  comment?: InputMaybe<Scalars['String']>
  duplicateTrackingId?: InputMaybe<Scalars['String']>
  id: Scalars['String']
  reason: Scalars['String']
}

export type MutationMarkEventAsNotDuplicateArgs = {
  id: Scalars['String']
}

export type MutationMarkEventAsReinstatedArgs = {
  id: Scalars['String']
}

export type MutationMarkEventAsUnassignedArgs = {
  id: Scalars['String']
}

export type MutationMarkEventAsVoidedArgs = {
  comment?: InputMaybe<Scalars['String']>
  id: Scalars['String']
  reason: Scalars['String']
}

export type MutationMarkMarriageAsCertifiedArgs = {
  details: MarriageRegistrationInput
  id: Scalars['ID']
}

export type MutationMarkMarriageAsIssuedArgs = {
  details: MarriageRegistrationInput
  id: Scalars['ID']
}

export type MutationMarkMarriageAsRegisteredArgs = {
  details: MarriageRegistrationInput
  id: Scalars['ID']
}

export type MutationMarkMarriageAsValidatedArgs = {
  details?: InputMaybe<MarriageRegistrationInput>
  id: Scalars['ID']
}

export type MutationReactivateSystemArgs = {
  clientId: Scalars['ID']
}

export type MutationRefreshSystemSecretArgs = {
  clientId: Scalars['String']
}

export type MutationRegisterSystemArgs = {
  system?: InputMaybe<SystemInput>
}

export type MutationRemoveBookmarkedAdvancedSearchArgs = {
  removeBookmarkedSearchInput: RemoveBookmarkedSeachInput
}

export type MutationRequestBirthRegistrationCorrectionArgs = {
  details: BirthRegistrationInput
  id: Scalars['ID']
}

export type MutationRequestDeathRegistrationCorrectionArgs = {
  details: DeathRegistrationInput
  id: Scalars['ID']
}

export type MutationRequestMarriageRegistrationCorrectionArgs = {
  details: MarriageRegistrationInput
  id: Scalars['ID']
}

export type MutationResendInviteArgs = {
  userId: Scalars['String']
}

export type MutationResetPasswordInviteArgs = {
  userId: Scalars['String']
}

export type MutationToggleInformantSmsNotificationArgs = {
  smsNotifications?: InputMaybe<Array<SmsNotificationInput>>
}

export type MutationUpdateApplicationConfigArgs = {
  applicationConfig?: InputMaybe<ApplicationConfigurationInput>
}

export type MutationUpdateBirthRegistrationArgs = {
  details: BirthRegistrationInput
  id: Scalars['ID']
}

export type MutationUpdateDeathRegistrationArgs = {
  details: DeathRegistrationInput
  id: Scalars['ID']
}

export type MutationUpdatePermissionsArgs = {
  setting: UpdatePermissionsInput
}

export type MutationUpdateRoleArgs = {
  systemRole?: InputMaybe<SystemRoleInput>
}

export type MutationUsernameReminderArgs = {
  userId: Scalars['String']
}

export type MutationVoidNotificationArgs = {
  id: Scalars['ID']
}

export type Notification = {
  __typename?: 'Notification'
  child?: Maybe<Person>
  createdAt?: Maybe<Scalars['Date']>
  father?: Maybe<Person>
  id: Scalars['ID']
  informant?: Maybe<Person>
  location?: Maybe<Location>
  mother?: Maybe<Person>
  updatedAt?: Maybe<Scalars['Date']>
}

export type NotificationInput = {
  child?: InputMaybe<PersonInput>
  createdAt?: InputMaybe<Scalars['Date']>
  father?: InputMaybe<PersonInput>
  informant?: InputMaybe<PersonInput>
  location?: InputMaybe<LocationInput>
  mother?: InputMaybe<PersonInput>
  updatedAt?: InputMaybe<Scalars['Date']>
}

export type OidpUserAddress = {
  __typename?: 'OIDPUserAddress'
  city?: Maybe<Scalars['String']>
  country?: Maybe<Scalars['String']>
  formatted?: Maybe<Scalars['String']>
  locality?: Maybe<Scalars['String']>
  postal_code?: Maybe<Scalars['String']>
  region?: Maybe<Scalars['String']>
  street_address?: Maybe<Scalars['String']>
}

export type OidpUserInfo = {
  __typename?: 'OIDPUserInfo'
  address?: Maybe<OidpUserAddress>
  birthdate?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  email_verified?: Maybe<Scalars['Boolean']>
  family_name?: Maybe<Scalars['String']>
  gender?: Maybe<Scalars['String']>
  given_name?: Maybe<Scalars['String']>
  locale?: Maybe<Scalars['String']>
  middle_name?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  nickname?: Maybe<Scalars['String']>
  phone_number?: Maybe<Scalars['String']>
  phone_number_verified?: Maybe<Scalars['Boolean']>
  picture?: Maybe<Scalars['String']>
  preferred_username?: Maybe<Scalars['String']>
  profile?: Maybe<Scalars['String']>
  sub: Scalars['String']
  updated_at?: Maybe<Scalars['Int']>
  website?: Maybe<Scalars['String']>
  zoneinfo?: Maybe<Scalars['String']>
}

export type OperationHistorySearchSet = {
  __typename?: 'OperationHistorySearchSet'
  notificationFacilityAlias?: Maybe<Array<Maybe<Scalars['String']>>>
  notificationFacilityName?: Maybe<Scalars['String']>
  operatedOn?: Maybe<Scalars['Date']>
  operationType?: Maybe<Scalars['String']>
  operatorName?: Maybe<Array<Maybe<HumanName>>>
  operatorOfficeAlias?: Maybe<Array<Maybe<Scalars['String']>>>
  operatorOfficeName?: Maybe<Scalars['String']>
  operatorRole?: Maybe<Scalars['String']>
  rejectComment?: Maybe<Scalars['String']>
  rejectReason?: Maybe<Scalars['String']>
}

export type Payment = {
  __typename?: 'Payment'
  amount?: Maybe<Scalars['Float']>
  date?: Maybe<Scalars['Date']>
  outcome?: Maybe<PaymentOutcomeType>
  paymentId?: Maybe<Scalars['ID']>
  total?: Maybe<Scalars['Float']>
  type?: Maybe<PaymentType>
}

export type PaymentInput = {
  amount?: InputMaybe<Scalars['Float']>
  data?: InputMaybe<Scalars['String']>
  date?: InputMaybe<Scalars['Date']>
  outcome?: InputMaybe<PaymentOutcomeType>
  paymentId?: InputMaybe<Scalars['ID']>
  total?: InputMaybe<Scalars['Float']>
  type?: InputMaybe<PaymentType>
}

export type PaymentMetric = {
  __typename?: 'PaymentMetric'
  paymentType: Scalars['String']
  total: Scalars['Float']
}

export enum PaymentOutcomeType {
  Completed = 'COMPLETED',
  Error = 'ERROR',
  Partial = 'PARTIAL'
}

export enum PaymentType {
  Manual = 'MANUAL'
}

export type Person = {
  __typename?: 'Person'
  _fhirID?: Maybe<Scalars['ID']>
  address?: Maybe<Array<Maybe<Address>>>
  age?: Maybe<Scalars['Float']>
  ageOfIndividualInYears?: Maybe<Scalars['Int']>
  birthDate?: Maybe<Scalars['String']>
  dateOfMarriage?: Maybe<Scalars['Date']>
  deceased?: Maybe<Deceased>
  detailsExist?: Maybe<Scalars['Boolean']>
  educationalAttainment?: Maybe<Scalars['String']>
  exactDateOfBirthUnknown?: Maybe<Scalars['Boolean']>
  gender?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['ID']>
  identifier?: Maybe<Array<Maybe<IdentityType>>>
  maritalStatus?: Maybe<Scalars['String']>
  multipleBirth?: Maybe<Scalars['Int']>
  name?: Maybe<Array<Maybe<HumanName>>>
  nationality?: Maybe<Array<Maybe<Scalars['String']>>>
  occupation?: Maybe<Scalars['String']>
  photo?: Maybe<Array<Maybe<Attachment>>>
  reasonNotApplying?: Maybe<Scalars['String']>
  telecom?: Maybe<Array<Maybe<ContactPoint>>>
}

export type PersonInput = {
  _fhirID?: InputMaybe<Scalars['ID']>
  address?: InputMaybe<Array<InputMaybe<AddressInput>>>
  age?: InputMaybe<Scalars['Float']>
  ageOfIndividualInYears?: InputMaybe<Scalars['Int']>
  birthDate?: InputMaybe<Scalars['String']>
  dateOfMarriage?: InputMaybe<Scalars['Date']>
  deceased?: InputMaybe<DeceasedInput>
  detailsExist?: InputMaybe<Scalars['Boolean']>
  educationalAttainment?: InputMaybe<Scalars['String']>
  gender?: InputMaybe<Scalars['String']>
  identifier?: InputMaybe<Array<InputMaybe<IdentityInput>>>
  maritalStatus?: InputMaybe<Scalars['String']>
  multipleBirth?: InputMaybe<Scalars['Int']>
  name?: InputMaybe<Array<InputMaybe<HumanNameInput>>>
  nationality?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  occupation?: InputMaybe<Scalars['String']>
  photo?: InputMaybe<Array<AttachmentInput>>
  reasonNotApplying?: InputMaybe<Scalars['String']>
  telecom?: InputMaybe<Array<InputMaybe<ContactPointInput>>>
}

export type Query = {
  __typename?: 'Query'
  fetchBirthRegistration?: Maybe<BirthRegistration>
  fetchDeathRegistration?: Maybe<DeathRegistration>
  fetchEventRegistration?: Maybe<EventRegistration>
  fetchLocationWiseEventMetrics?: Maybe<Array<LocationWiseEstimationMetric>>
  fetchMarriageRegistration?: Maybe<MarriageRegistration>
  fetchMonthWiseEventMetrics?: Maybe<Array<MonthWiseEstimationMetric>>
  fetchRecordDetailsForVerification?: Maybe<RecordDetails>
  fetchRegistration?: Maybe<EventRegistration>
  fetchRegistrationCountByStatus?: Maybe<RegistrationCountResult>
  fetchRegistrationForViewing?: Maybe<EventRegistration>
  fetchSystem?: Maybe<System>
  getActiveCertificatesSVG?: Maybe<Array<CertificateSvg>>
  getCertificateSVG?: Maybe<CertificateSvg>
  getDeclarationsStartedMetrics?: Maybe<DeclarationsStartedMetrics>
  getEventsWithProgress?: Maybe<EventProgressResultSet>
  getLocationStatistics?: Maybe<LocationStatisticsResponse>
  getOIDPUserInfo?: Maybe<UserInfo>
  getRegistrationsListByFilter?: Maybe<MixedTotalMetricsResult>
  getSystemRoles?: Maybe<Array<SystemRole>>
  getTotalCertifications?: Maybe<Array<CertificationMetric>>
  getTotalCorrections?: Maybe<Array<CorrectionMetric>>
  getTotalMetrics?: Maybe<TotalMetricsResult>
  getTotalPayments?: Maybe<Array<PaymentMetric>>
  getUser?: Maybe<User>
  getUserAuditLog?: Maybe<UserAuditLogResultSet>
  getUserByEmail?: Maybe<User>
  getUserByMobile?: Maybe<User>
  getVSExports?: Maybe<TotalVsExport>
  hasChildLocation?: Maybe<Location>
  informantSMSNotifications?: Maybe<Array<SmsNotification>>
  listBirthRegistrations?: Maybe<BirthRegResultSet>
  listNotifications?: Maybe<Array<Maybe<Notification>>>
  locationById?: Maybe<Location>
  locationsByParent?: Maybe<Array<Maybe<Location>>>
  queryPersonByIdentifier?: Maybe<Person>
  queryPersonByNidIdentifier?: Maybe<Person>
  queryRegistrationByIdentifier?: Maybe<BirthRegistration>
  searchBirthRegistrations?: Maybe<Array<Maybe<BirthRegistration>>>
  searchDeathRegistrations?: Maybe<Array<Maybe<DeathRegistration>>>
  searchEvents?: Maybe<EventSearchResultSet>
  searchFieldAgents?: Maybe<SearchFieldAgentResult>
  searchUsers?: Maybe<SearchUserResult>
  verifyPasswordById?: Maybe<VerifyPasswordResult>
}

export type QueryFetchBirthRegistrationArgs = {
  id: Scalars['ID']
}

export type QueryFetchDeathRegistrationArgs = {
  id: Scalars['ID']
}

export type QueryFetchEventRegistrationArgs = {
  id: Scalars['ID']
}

export type QueryFetchLocationWiseEventMetricsArgs = {
  event: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QueryFetchMarriageRegistrationArgs = {
  id: Scalars['ID']
}

export type QueryFetchMonthWiseEventMetricsArgs = {
  event: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QueryFetchRecordDetailsForVerificationArgs = {
  id: Scalars['String']
}

export type QueryFetchRegistrationArgs = {
  id: Scalars['ID']
}

export type QueryFetchRegistrationCountByStatusArgs = {
  event?: InputMaybe<Scalars['String']>
  locationId?: InputMaybe<Scalars['String']>
  status: Array<InputMaybe<Scalars['String']>>
}

export type QueryFetchRegistrationForViewingArgs = {
  id: Scalars['ID']
}

export type QueryFetchSystemArgs = {
  clientId: Scalars['ID']
}

export type QueryGetCertificateSvgArgs = {
  event: Event
  status: CertificateStatus
}

export type QueryGetDeclarationsStartedMetricsArgs = {
  locationId: Scalars['String']
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QueryGetEventsWithProgressArgs = {
  compositionType?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  count?: InputMaybe<Scalars['Int']>
  declarationJurisdictionId?: InputMaybe<Scalars['String']>
  registrationStatuses?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<Scalars['String']>
}

export type QueryGetLocationStatisticsArgs = {
  locationId?: InputMaybe<Scalars['String']>
  populationYear: Scalars['Int']
}

export type QueryGetOidpUserInfoArgs = {
  clientId: Scalars['String']
  code: Scalars['String']
  grantType?: InputMaybe<Scalars['String']>
  redirectUri: Scalars['String']
}

export type QueryGetRegistrationsListByFilterArgs = {
  event: Scalars['String']
  filterBy: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
  size: Scalars['Int']
  skip: Scalars['Int']
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QueryGetSystemRolesArgs = {
  active?: InputMaybe<Scalars['Boolean']>
  role?: InputMaybe<Scalars['String']>
  sortBy?: InputMaybe<Scalars['String']>
  sortOrder?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
  value?: InputMaybe<ComparisonInput>
}

export type QueryGetTotalCertificationsArgs = {
  locationId?: InputMaybe<Scalars['String']>
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QueryGetTotalCorrectionsArgs = {
  event: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QueryGetTotalMetricsArgs = {
  event: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QueryGetTotalPaymentsArgs = {
  event: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QueryGetUserArgs = {
  userId?: InputMaybe<Scalars['String']>
}

export type QueryGetUserAuditLogArgs = {
  count: Scalars['Int']
  practitionerId: Scalars['String']
  skip?: InputMaybe<Scalars['Int']>
  timeEnd?: InputMaybe<Scalars['String']>
  timeStart?: InputMaybe<Scalars['String']>
}

export type QueryGetUserByEmailArgs = {
  email?: InputMaybe<Scalars['String']>
}

export type QueryGetUserByMobileArgs = {
  mobile?: InputMaybe<Scalars['String']>
}

export type QueryHasChildLocationArgs = {
  parentId?: InputMaybe<Scalars['String']>
}

export type QueryListBirthRegistrationsArgs = {
  count?: InputMaybe<Scalars['Int']>
  from?: InputMaybe<Scalars['Date']>
  locationIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  skip?: InputMaybe<Scalars['Int']>
  status?: InputMaybe<Scalars['String']>
  to?: InputMaybe<Scalars['Date']>
  userId?: InputMaybe<Scalars['String']>
}

export type QueryListNotificationsArgs = {
  from?: InputMaybe<Scalars['Date']>
  locationIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  status?: InputMaybe<Scalars['String']>
  to?: InputMaybe<Scalars['Date']>
  userId?: InputMaybe<Scalars['String']>
}

export type QueryLocationByIdArgs = {
  locationId?: InputMaybe<Scalars['String']>
}

export type QueryLocationsByParentArgs = {
  parentId?: InputMaybe<Scalars['String']>
  type?: InputMaybe<Scalars['String']>
}

export type QueryQueryPersonByIdentifierArgs = {
  identifier: Scalars['ID']
}

export type QueryQueryPersonByNidIdentifierArgs = {
  country?: InputMaybe<Scalars['String']>
  dob?: InputMaybe<Scalars['String']>
  nid?: InputMaybe<Scalars['String']>
}

export type QueryQueryRegistrationByIdentifierArgs = {
  identifier: Scalars['ID']
}

export type QuerySearchBirthRegistrationsArgs = {
  fromDate?: InputMaybe<Scalars['Date']>
  toDate?: InputMaybe<Scalars['Date']>
}

export type QuerySearchDeathRegistrationsArgs = {
  fromDate?: InputMaybe<Scalars['Date']>
  toDate?: InputMaybe<Scalars['Date']>
}

export type QuerySearchEventsArgs = {
  advancedSearchParameters: AdvancedSearchParametersInput
  count?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<Scalars['String']>
  sortColumn?: InputMaybe<Scalars['String']>
  userId?: InputMaybe<Scalars['String']>
}

export type QuerySearchFieldAgentsArgs = {
  count?: InputMaybe<Scalars['Int']>
  event?: InputMaybe<Scalars['String']>
  language?: InputMaybe<Scalars['String']>
  locationId?: InputMaybe<Scalars['String']>
  primaryOfficeId?: InputMaybe<Scalars['String']>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<Scalars['String']>
  status?: InputMaybe<Scalars['String']>
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QuerySearchUsersArgs = {
  count?: InputMaybe<Scalars['Int']>
  email?: InputMaybe<Scalars['String']>
  locationId?: InputMaybe<Scalars['String']>
  mobile?: InputMaybe<Scalars['String']>
  primaryOfficeId?: InputMaybe<Scalars['String']>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<Scalars['String']>
  status?: InputMaybe<Scalars['String']>
  systemRole?: InputMaybe<Scalars['String']>
  username?: InputMaybe<Scalars['String']>
}

export type QueryVerifyPasswordByIdArgs = {
  id: Scalars['String']
  password: Scalars['String']
}

export type QuestionnaireQuestion = {
  __typename?: 'QuestionnaireQuestion'
  fieldId?: Maybe<Scalars['String']>
  value?: Maybe<Scalars['String']>
}

export type QuestionnaireQuestionInput = {
  fieldId?: InputMaybe<Scalars['String']>
  value?: InputMaybe<Scalars['String']>
}

export type RecordDetails = BirthRegistration | DeathRegistration

export enum RegAction {
  Assigned = 'ASSIGNED',
  Downloaded = 'DOWNLOADED',
  FlaggedAsPotentialDuplicate = 'FLAGGED_AS_POTENTIAL_DUPLICATE',
  MarkedAsDuplicate = 'MARKED_AS_DUPLICATE',
  MarkedAsNotDuplicate = 'MARKED_AS_NOT_DUPLICATE',
  Reinstated = 'REINSTATED',
  RequestedCorrection = 'REQUESTED_CORRECTION',
  Unassigned = 'UNASSIGNED',
  Verified = 'VERIFIED',
  Viewed = 'VIEWED'
}

export enum RegStatus {
  Archived = 'ARCHIVED',
  Certified = 'CERTIFIED',
  DeclarationUpdated = 'DECLARATION_UPDATED',
  Declared = 'DECLARED',
  InProgress = 'IN_PROGRESS',
  Issued = 'ISSUED',
  Registered = 'REGISTERED',
  Rejected = 'REJECTED',
  Validated = 'VALIDATED',
  WaitingValidation = 'WAITING_VALIDATION'
}

export type RegWorkflow = {
  __typename?: 'RegWorkflow'
  comments?: Maybe<Array<Maybe<Comment>>>
  id: Scalars['ID']
  location?: Maybe<Location>
  office?: Maybe<Location>
  reason?: Maybe<Scalars['String']>
  timeLogged?: Maybe<Scalars['Int']>
  timestamp?: Maybe<Scalars['Date']>
  type?: Maybe<RegStatus>
  user?: Maybe<User>
}

export type RegWorkflowInput = {
  comments?: InputMaybe<Array<InputMaybe<CommentInput>>>
  location?: InputMaybe<LocationInput>
  reason?: InputMaybe<Scalars['String']>
  timeLoggedMS?: InputMaybe<Scalars['Int']>
  timestamp?: InputMaybe<Scalars['Date']>
  type?: InputMaybe<RegStatus>
  user?: InputMaybe<UserInput>
}

export type Registration = {
  __typename?: 'Registration'
  _fhirID?: Maybe<Scalars['ID']>
  assignment?: Maybe<AssignmentData>
  attachments?: Maybe<Array<Maybe<Attachment>>>
  book?: Maybe<Scalars['String']>
  brideSignature?: Maybe<Scalars['String']>
  brideSignatureURI?: Maybe<Scalars['String']>
  certificates?: Maybe<Array<Maybe<Certificate>>>
  contact?: Maybe<Scalars['String']>
  contactEmail?: Maybe<Scalars['String']>
  contactPhoneNumber?: Maybe<Scalars['String']>
  contactRelationship?: Maybe<Scalars['String']>
  draftId?: Maybe<Scalars['String']>
  duplicates?: Maybe<Array<Maybe<DuplicatesInfo>>>
  groomSignature?: Maybe<Scalars['String']>
  groomSignatureURI?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['ID']>
  inCompleteFields?: Maybe<Scalars['String']>
  informantType?: Maybe<Scalars['String']>
  informantsSignature?: Maybe<Scalars['String']>
  informantsSignatureURI?: Maybe<Scalars['String']>
  otherInformantType?: Maybe<Scalars['String']>
  page?: Maybe<Scalars['String']>
  paperFormID?: Maybe<Scalars['String']>
  registrationNumber?: Maybe<Scalars['String']>
  status?: Maybe<Array<Maybe<RegWorkflow>>>
  trackingId?: Maybe<Scalars['String']>
  type?: Maybe<RegistrationType>
  witnessOneSignature?: Maybe<Scalars['String']>
  witnessOneSignatureURI?: Maybe<Scalars['String']>
  witnessTwoSignature?: Maybe<Scalars['String']>
  witnessTwoSignatureURI?: Maybe<Scalars['String']>
}

export type RegistrationCountResult = {
  __typename?: 'RegistrationCountResult'
  results: Array<Maybe<StatusWiseRegistrationCount>>
  total: Scalars['Int']
}

export type RegistrationInput = {
  _fhirID?: InputMaybe<Scalars['ID']>
  attachments?: InputMaybe<Array<AttachmentInput>>
  book?: InputMaybe<Scalars['String']>
  brideSignature?: InputMaybe<Scalars['String']>
  certificates?: InputMaybe<Array<InputMaybe<CertificateInput>>>
  contactEmail?: InputMaybe<Scalars['String']>
  contactPhoneNumber?: InputMaybe<Scalars['String']>
  correction?: InputMaybe<CorrectionInput>
  draftId?: InputMaybe<Scalars['String']>
  groomSignature?: InputMaybe<Scalars['String']>
  inCompleteFields?: InputMaybe<Scalars['String']>
  informantType?: InputMaybe<Scalars['String']>
  informantsSignature?: InputMaybe<Scalars['String']>
  location?: InputMaybe<LocationInput>
  otherInformantType?: InputMaybe<Scalars['String']>
  page?: InputMaybe<Scalars['String']>
  paperFormID?: InputMaybe<Scalars['String']>
  registrationNumber?: InputMaybe<Scalars['String']>
  status?: InputMaybe<Array<InputMaybe<RegWorkflowInput>>>
  trackingId?: InputMaybe<Scalars['String']>
  type?: InputMaybe<RegistrationType>
  witnessOneSignature?: InputMaybe<Scalars['String']>
  witnessTwoSignature?: InputMaybe<Scalars['String']>
}

export type RegistrationSearchSet = {
  __typename?: 'RegistrationSearchSet'
  assignment?: Maybe<AssignmentData>
  comment?: Maybe<Scalars['String']>
  contactNumber?: Maybe<Scalars['String']>
  contactRelationship?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['String']>
  dateOfDeclaration?: Maybe<Scalars['Date']>
  duplicates?: Maybe<Array<Maybe<Scalars['ID']>>>
  eventLocationId?: Maybe<Scalars['String']>
  modifiedAt?: Maybe<Scalars['String']>
  reason?: Maybe<Scalars['String']>
  registeredLocationId?: Maybe<Scalars['String']>
  registrationNumber?: Maybe<Scalars['String']>
  status?: Maybe<Scalars['String']>
  trackingId?: Maybe<Scalars['String']>
}

export enum RegistrationType {
  Birth = 'BIRTH',
  Death = 'DEATH',
  Marriage = 'MARRIAGE'
}

export type Reinstated = {
  __typename?: 'Reinstated'
  registrationStatus?: Maybe<RegStatus>
  taskEntryResourceID: Scalars['ID']
}

export type RelatedPerson = {
  __typename?: 'RelatedPerson'
  _fhirID?: Maybe<Scalars['ID']>
  _fhirIDPatient?: Maybe<Scalars['ID']>
  address?: Maybe<Array<Maybe<Address>>>
  affidavit?: Maybe<Array<Maybe<Attachment>>>
  age?: Maybe<Scalars['Float']>
  ageOfIndividualInYears?: Maybe<Scalars['Int']>
  birthDate?: Maybe<Scalars['String']>
  dateOfMarriage?: Maybe<Scalars['Date']>
  deceased?: Maybe<Deceased>
  detailsExist?: Maybe<Scalars['Boolean']>
  educationalAttainment?: Maybe<Scalars['String']>
  exactDateOfBirthUnknown?: Maybe<Scalars['Boolean']>
  gender?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['ID']>
  identifier?: Maybe<Array<Maybe<IdentityType>>>
  maritalStatus?: Maybe<Scalars['String']>
  multipleBirth?: Maybe<Scalars['Int']>
  name?: Maybe<Array<Maybe<HumanName>>>
  nationality?: Maybe<Array<Maybe<Scalars['String']>>>
  occupation?: Maybe<Scalars['String']>
  otherRelationship?: Maybe<Scalars['String']>
  photo?: Maybe<Array<Maybe<Attachment>>>
  reasonNotApplying?: Maybe<Scalars['String']>
  relationship?: Maybe<Scalars['String']>
  telecom?: Maybe<Array<Maybe<ContactPoint>>>
}

export type RelatedPersonInput = {
  _fhirID?: InputMaybe<Scalars['ID']>
  _fhirIDPatient?: InputMaybe<Scalars['ID']>
  address?: InputMaybe<Array<InputMaybe<AddressInput>>>
  affidavit?: InputMaybe<Array<AttachmentInput>>
  age?: InputMaybe<Scalars['Float']>
  ageOfIndividualInYears?: InputMaybe<Scalars['Int']>
  birthDate?: InputMaybe<Scalars['String']>
  dateOfMarriage?: InputMaybe<Scalars['Date']>
  deceased?: InputMaybe<DeceasedInput>
  detailsExist?: InputMaybe<Scalars['Boolean']>
  educationalAttainment?: InputMaybe<Scalars['String']>
  exactDateOfBirthUnknown?: InputMaybe<Scalars['Boolean']>
  gender?: InputMaybe<Scalars['String']>
  id?: InputMaybe<Scalars['ID']>
  identifier?: InputMaybe<Array<InputMaybe<IdentityInput>>>
  maritalStatus?: InputMaybe<Scalars['String']>
  multipleBirth?: InputMaybe<Scalars['Int']>
  name?: InputMaybe<Array<InputMaybe<HumanNameInput>>>
  nationality?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  occupation?: InputMaybe<Scalars['String']>
  otherRelationship?: InputMaybe<Scalars['String']>
  photo?: InputMaybe<Array<AttachmentInput>>
  reasonNotApplying?: InputMaybe<Scalars['String']>
  relationship?: InputMaybe<Scalars['String']>
  telecom?: InputMaybe<Array<InputMaybe<ContactPointInput>>>
}

export type RemoveBookmarkedSeachInput = {
  searchId: Scalars['String']
  userId: Scalars['String']
}

export type Response = {
  __typename?: 'Response'
  roleIdMap: Scalars['Map']
}

export type Role = {
  __typename?: 'Role'
  _id: Scalars['ID']
  labels: Array<RoleLabel>
}

export type RoleInput = {
  _id?: InputMaybe<Scalars['ID']>
  labels: Array<LabelInput>
}

export type RoleLabel = {
  __typename?: 'RoleLabel'
  label: Scalars['String']
  lang: Scalars['String']
}

export type SmsNotification = {
  __typename?: 'SMSNotification'
  createdAt: Scalars['String']
  enabled: Scalars['Boolean']
  id?: Maybe<Scalars['String']>
  name: Scalars['String']
  updatedAt: Scalars['String']
}

export type SmsNotificationInput = {
  enabled: Scalars['Boolean']
  id: Scalars['String']
  name: Scalars['String']
}

export type SearchFieldAgentResponse = {
  __typename?: 'SearchFieldAgentResponse'
  avatar?: Maybe<Avatar>
  averageTimeForDeclaredDeclarations?: Maybe<Scalars['Int']>
  creationDate?: Maybe<Scalars['String']>
  fullName?: Maybe<Scalars['String']>
  practitionerId?: Maybe<Scalars['String']>
  primaryOfficeId?: Maybe<Scalars['String']>
  role?: Maybe<Role>
  status?: Maybe<Status>
  totalNumberOfDeclarationStarted?: Maybe<Scalars['Int']>
  totalNumberOfInProgressAppStarted?: Maybe<Scalars['Int']>
  totalNumberOfRejectedDeclarations?: Maybe<Scalars['Int']>
}

export type SearchFieldAgentResult = {
  __typename?: 'SearchFieldAgentResult'
  results?: Maybe<Array<Maybe<SearchFieldAgentResponse>>>
  totalItems?: Maybe<Scalars['Int']>
}

export type SearchUserResult = {
  __typename?: 'SearchUserResult'
  results?: Maybe<Array<Maybe<User>>>
  totalItems?: Maybe<Scalars['Int']>
}

export type SecurityQuestionAnswer = {
  answer?: InputMaybe<Scalars['String']>
  questionKey?: InputMaybe<Scalars['String']>
}

export type Signature = {
  __typename?: 'Signature'
  data?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

export type SignatureInput = {
  data: Scalars['String']
  type?: InputMaybe<Scalars['String']>
}

export enum Status {
  Active = 'active',
  Deactivated = 'deactivated',
  Disabled = 'disabled',
  Pending = 'pending'
}

export type StatusReason = {
  __typename?: 'StatusReason'
  text?: Maybe<Scalars['String']>
}

export type StatusWiseRegistrationCount = {
  __typename?: 'StatusWiseRegistrationCount'
  count: Scalars['Int']
  status: Scalars['String']
}

export type System = {
  __typename?: 'System'
  _id: Scalars['ID']
  clientId: Scalars['ID']
  integratingSystemType?: Maybe<IntegratingSystemType>
  name: Scalars['String']
  settings?: Maybe<SystemSettings>
  shaSecret: Scalars['ID']
  status: SystemStatus
  type: SystemType
}

export type SystemInput = {
  integratingSystemType?: InputMaybe<IntegratingSystemType>
  name: Scalars['String']
  settings?: InputMaybe<SystemSettingsInput>
  type: SystemType
}

export type SystemRole = {
  __typename?: 'SystemRole'
  active: Scalars['Boolean']
  id: Scalars['ID']
  roles: Array<Role>
  value: SystemRoleType
}

export type SystemRoleInput = {
  active?: InputMaybe<Scalars['Boolean']>
  id: Scalars['ID']
  roles?: InputMaybe<Array<RoleInput>>
  value?: InputMaybe<Scalars['String']>
}

export enum SystemRoleType {
  FieldAgent = 'FIELD_AGENT',
  LocalRegistrar = 'LOCAL_REGISTRAR',
  LocalSystemAdmin = 'LOCAL_SYSTEM_ADMIN',
  NationalRegistrar = 'NATIONAL_REGISTRAR',
  NationalSystemAdmin = 'NATIONAL_SYSTEM_ADMIN',
  PerformanceManagement = 'PERFORMANCE_MANAGEMENT',
  RegistrationAgent = 'REGISTRATION_AGENT'
}

export type SystemSecret = {
  __typename?: 'SystemSecret'
  clientSecret: Scalars['ID']
  system: System
}

export type SystemSettings = {
  __typename?: 'SystemSettings'
  dailyQuota?: Maybe<Scalars['Int']>
  openIdProviderBaseUrl?: Maybe<Scalars['String']>
  openIdProviderClaims?: Maybe<Scalars['String']>
  openIdProviderClientId?: Maybe<Scalars['String']>
  webhook?: Maybe<Array<WebhookPermission>>
}

export type SystemSettingsInput = {
  dailyQuota?: InputMaybe<Scalars['Int']>
  webhook?: InputMaybe<Array<InputMaybe<WebhookInput>>>
}

export enum SystemStatus {
  Active = 'active',
  Deactivated = 'deactivated'
}

export enum SystemType {
  Health = 'HEALTH',
  NationalId = 'NATIONAL_ID',
  RecordSearch = 'RECORD_SEARCH',
  Webhook = 'WEBHOOK'
}

export type TotalMetricsByLocation = {
  __typename?: 'TotalMetricsByLocation'
  results: Array<EventMetricsByLocation>
  total?: Maybe<Scalars['Int']>
}

export type TotalMetricsByRegistrar = {
  __typename?: 'TotalMetricsByRegistrar'
  results: Array<EventMetricsByRegistrar>
  total?: Maybe<Scalars['Int']>
}

export type TotalMetricsByTime = {
  __typename?: 'TotalMetricsByTime'
  results: Array<EventMetricsByTime>
  total?: Maybe<Scalars['Int']>
}

export type TotalMetricsResult = {
  __typename?: 'TotalMetricsResult'
  estimated: Estimation
  results: Array<EventMetrics>
}

export type TotalVsExport = {
  __typename?: 'TotalVSExport'
  results?: Maybe<Array<VsExport>>
}

export type UpdatePermissionsInput = {
  clientId: Scalars['String']
  webhook: Array<WebhookInput>
}

export type User = {
  __typename?: 'User'
  avatar?: Maybe<Avatar>
  catchmentArea?: Maybe<Array<Location>>
  creationDate: Scalars['String']
  device?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  id: Scalars['ID']
  identifier?: Maybe<Identifier>
  localRegistrar?: Maybe<LocalRegistrar>
  mobile?: Maybe<Scalars['String']>
  name: Array<HumanName>
  practitionerId: Scalars['String']
  primaryOffice?: Maybe<Location>
  role: Role
  searches?: Maybe<Array<BookmarkedSeachItem>>
  signature?: Maybe<Signature>
  status: Status
  systemRole: SystemRoleType
  underInvestigation?: Maybe<Scalars['Boolean']>
  userMgntUserID: Scalars['ID']
  username?: Maybe<Scalars['String']>
}

export type UserAuditLogItem = AuditLogItemBase & {
  __typename?: 'UserAuditLogItem'
  action: Scalars['String']
  ipAddress: Scalars['String']
  practitionerId: Scalars['String']
  time: Scalars['String']
  userAgent: Scalars['String']
}

export type UserAuditLogItemWithComposition = AuditLogItemBase & {
  __typename?: 'UserAuditLogItemWithComposition'
  action: Scalars['String']
  data: AdditionalIdWithCompositionId
  ipAddress: Scalars['String']
  practitionerId: Scalars['String']
  time: Scalars['String']
  userAgent: Scalars['String']
}

export type UserAuditLogResultItem =
  | UserAuditLogItem
  | UserAuditLogItemWithComposition

export type UserAuditLogResultSet = {
  __typename?: 'UserAuditLogResultSet'
  results: Array<UserAuditLogResultItem>
  total: Scalars['Int']
}

export type UserIdentifierInput = {
  system?: InputMaybe<Scalars['String']>
  use?: InputMaybe<Scalars['String']>
  value?: InputMaybe<Scalars['String']>
}

export type UserInfo = {
  __typename?: 'UserInfo'
  districtFhirId?: Maybe<Scalars['String']>
  locationLevel3FhirId?: Maybe<Scalars['String']>
  oidpUserInfo?: Maybe<OidpUserInfo>
  stateFhirId?: Maybe<Scalars['String']>
}

export type UserInput = {
  catchmentArea?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  device?: InputMaybe<Scalars['String']>
  email?: InputMaybe<Scalars['String']>
  id?: InputMaybe<Scalars['ID']>
  identifier?: InputMaybe<Array<InputMaybe<UserIdentifierInput>>>
  mobile?: InputMaybe<Scalars['String']>
  name: Array<HumanNameInput>
  password?: InputMaybe<Scalars['String']>
  primaryOffice?: InputMaybe<Scalars['String']>
  role?: InputMaybe<Scalars['String']>
  signature?: InputMaybe<SignatureInput>
  status?: InputMaybe<Status>
  systemRole: SystemRoleType
  username?: InputMaybe<Scalars['String']>
}

export type VsExport = {
  __typename?: 'VSExport'
  createdOn: Scalars['Date']
  endDate: Scalars['Date']
  event: Scalars['String']
  fileSize: Scalars['String']
  startDate: Scalars['Date']
  url: Scalars['String']
}

export type VerifyPasswordResult = {
  __typename?: 'VerifyPasswordResult'
  id?: Maybe<Scalars['String']>
  mobile?: Maybe<Scalars['String']>
  scrope?: Maybe<Array<Maybe<Scalars['String']>>>
  status?: Maybe<Scalars['String']>
  username?: Maybe<Scalars['String']>
}

export type WebhookInput = {
  event: Scalars['String']
  permissions: Array<InputMaybe<Scalars['String']>>
}

export type WebhookPermission = {
  __typename?: 'WebhookPermission'
  event: Scalars['String']
  permissions: Array<Scalars['String']>
}

export type BirthRegistrationFragmentFragment = {
  __typename: 'BirthRegistration'
  _fhirIDMap?: any | null
  id: string
  createdAt?: any | null
  attendantAtBirth?: string | null
  weightAtBirth?: number | null
  birthType?: string | null
  child?: {
    __typename?: 'Person'
    id?: string | null
    birthDate?: string | null
    gender?: string | null
    name?: Array<{
      __typename?: 'HumanName'
      use?: string | null
      firstNames?: string | null
      familyName?: string | null
    } | null> | null
  } | null
  informant?: {
    __typename?: 'RelatedPerson'
    id?: string | null
    relationship?: string | null
    _fhirIDPatient?: string | null
    occupation?: string | null
    nationality?: Array<string | null> | null
    birthDate?: string | null
    identifier?: Array<{
      __typename?: 'IdentityType'
      id?: string | null
      type?: string | null
    } | null> | null
    name?: Array<{
      __typename?: 'HumanName'
      use?: string | null
      firstNames?: string | null
      familyName?: string | null
    } | null> | null
    address?: Array<{
      __typename?: 'Address'
      type?: string | null
      line?: Array<string | null> | null
      district?: string | null
      state?: string | null
      city?: string | null
      postalCode?: string | null
      country?: string | null
    } | null> | null
  } | null
  mother?: {
    __typename?: 'Person'
    id?: string | null
    birthDate?: string | null
    multipleBirth?: number | null
    maritalStatus?: string | null
    occupation?: string | null
    detailsExist?: boolean | null
    dateOfMarriage?: any | null
    educationalAttainment?: string | null
    nationality?: Array<string | null> | null
    name?: Array<{
      __typename?: 'HumanName'
      use?: string | null
      firstNames?: string | null
      familyName?: string | null
    } | null> | null
    identifier?: Array<{
      __typename?: 'IdentityType'
      id?: string | null
      type?: string | null
    } | null> | null
    address?: Array<{
      __typename?: 'Address'
      type?: string | null
      line?: Array<string | null> | null
      district?: string | null
      state?: string | null
      city?: string | null
      postalCode?: string | null
      country?: string | null
    } | null> | null
    telecom?: Array<{
      __typename?: 'ContactPoint'
      system?: string | null
      value?: string | null
    } | null> | null
  } | null
  father?: {
    __typename?: 'Person'
    id?: string | null
    birthDate?: string | null
    maritalStatus?: string | null
    occupation?: string | null
    detailsExist?: boolean | null
    dateOfMarriage?: any | null
    educationalAttainment?: string | null
    nationality?: Array<string | null> | null
    reasonNotApplying?: string | null
    name?: Array<{
      __typename?: 'HumanName'
      use?: string | null
      firstNames?: string | null
      familyName?: string | null
    } | null> | null
    identifier?: Array<{
      __typename?: 'IdentityType'
      id?: string | null
      type?: string | null
    } | null> | null
    address?: Array<{
      __typename?: 'Address'
      type?: string | null
      line?: Array<string | null> | null
      district?: string | null
      state?: string | null
      city?: string | null
      postalCode?: string | null
      country?: string | null
    } | null> | null
    telecom?: Array<{
      __typename?: 'ContactPoint'
      system?: string | null
      value?: string | null
    } | null> | null
  } | null
  registration?: {
    __typename?: 'Registration'
    id?: string | null
    informantType?: string | null
    contactPhoneNumber?: string | null
    type?: RegistrationType | null
    trackingId?: string | null
    registrationNumber?: string | null
    attachments?: Array<{
      __typename?: 'Attachment'
      data?: string | null
      uri?: string | null
      type?: string | null
      contentType?: string | null
      subject?: string | null
    } | null> | null
    status?: Array<{
      __typename?: 'RegWorkflow'
      type?: RegStatus | null
      timestamp?: any | null
      comments?: Array<{
        __typename?: 'Comment'
        comment?: string | null
      } | null> | null
    } | null> | null
  } | null
  eventLocation?: {
    __typename?: 'Location'
    id: string
    type?: string | null
    address?: {
      __typename?: 'Address'
      line?: Array<string | null> | null
      district?: string | null
      state?: string | null
      city?: string | null
      postalCode?: string | null
      country?: string | null
    } | null
  } | null
  questionnaire?: Array<{
    __typename?: 'QuestionnaireQuestion'
    fieldId?: string | null
    value?: string | null
  } | null> | null
}

export type RegisterBirthDeclarationMutationVariables = Exact<{
  id: Scalars['ID']
  details: BirthRegistrationInput
}>

export type RegisterBirthDeclarationMutation = {
  __typename?: 'Mutation'
  markBirthAsRegistered: { __typename?: 'BirthRegistration'; id: string }
}

export type MarkEventAsVoidedMutationVariables = Exact<{
  id: Scalars['String']
  reason: Scalars['String']
  comment: Scalars['String']
}>

export type MarkEventAsVoidedMutation = {
  __typename?: 'Mutation'
  markEventAsVoided: string
}

export type CreateDeathDeclarationMutationVariables = Exact<{
  details: DeathRegistrationInput
}>

export type CreateDeathDeclarationMutation = {
  __typename?: 'Mutation'
  createDeathRegistration: {
    __typename?: 'CreatedIds'
    trackingId?: string | null
    compositionId?: string | null
  }
}

export type MarkBirthAsCertifiedMutationVariables = Exact<{
  id: Scalars['ID']
  details: BirthRegistrationInput
}>

export type MarkBirthAsCertifiedMutation = {
  __typename?: 'Mutation'
  markBirthAsCertified: string
}

export type MarkDeathAsCertifiedMutationVariables = Exact<{
  id: Scalars['ID']
  details: DeathRegistrationInput
}>

export type MarkDeathAsCertifiedMutation = {
  __typename?: 'Mutation'
  markDeathAsCertified: string
}

export type MarkBirthAsIssuedMutationVariables = Exact<{
  id: Scalars['ID']
  details: BirthRegistrationInput
}>

export type MarkBirthAsIssuedMutation = {
  __typename?: 'Mutation'
  markBirthAsIssued: string
}

export type MarkDeathAsIssuedMutationVariables = Exact<{
  id: Scalars['ID']
  details: DeathRegistrationInput
}>

export type MarkDeathAsIssuedMutation = {
  __typename?: 'Mutation'
  markDeathAsIssued: string
}

export type SearchEventsQueryVariables = Exact<{
  sort?: InputMaybe<Scalars['String']>
  advancedSearchParameters: AdvancedSearchParametersInput
}>

export type SearchEventsQuery = {
  __typename?: 'Query'
  searchEvents?: {
    __typename?: 'EventSearchResultSet'
    results?: Array<
      | {
          __typename?: 'BirthEventSearchSet'
          registration?: {
            __typename?: 'RegistrationSearchSet'
            dateOfDeclaration?: any | null
          } | null
        }
      | {
          __typename?: 'DeathEventSearchSet'
          registration?: {
            __typename?: 'RegistrationSearchSet'
            dateOfDeclaration?: any | null
          } | null
        }
      | {
          __typename?: 'MarriageEventSearchSet'
          registration?: {
            __typename?: 'RegistrationSearchSet'
            dateOfDeclaration?: any | null
          } | null
        }
      | null
    > | null
  } | null
}

export type RegisterDeathDeclarationMutationVariables = Exact<{
  id: Scalars['ID']
  details: DeathRegistrationInput
}>

export type RegisterDeathDeclarationMutation = {
  __typename?: 'Mutation'
  markDeathAsRegistered: { __typename?: 'DeathRegistration'; id: string }
}

export type FetchBirthRegistrationQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type FetchBirthRegistrationQuery = {
  __typename?: 'Query'
  fetchBirthRegistration?: {
    __typename: 'BirthRegistration'
    _fhirIDMap?: any | null
    id: string
    createdAt?: any | null
    attendantAtBirth?: string | null
    weightAtBirth?: number | null
    birthType?: string | null
    child?: {
      __typename?: 'Person'
      id?: string | null
      birthDate?: string | null
      gender?: string | null
      name?: Array<{
        __typename?: 'HumanName'
        use?: string | null
        firstNames?: string | null
        familyName?: string | null
      } | null> | null
    } | null
    informant?: {
      __typename?: 'RelatedPerson'
      id?: string | null
      relationship?: string | null
      _fhirIDPatient?: string | null
      occupation?: string | null
      nationality?: Array<string | null> | null
      birthDate?: string | null
      identifier?: Array<{
        __typename?: 'IdentityType'
        id?: string | null
        type?: string | null
      } | null> | null
      name?: Array<{
        __typename?: 'HumanName'
        use?: string | null
        firstNames?: string | null
        familyName?: string | null
      } | null> | null
      address?: Array<{
        __typename?: 'Address'
        type?: string | null
        line?: Array<string | null> | null
        district?: string | null
        state?: string | null
        city?: string | null
        postalCode?: string | null
        country?: string | null
      } | null> | null
    } | null
    mother?: {
      __typename?: 'Person'
      id?: string | null
      birthDate?: string | null
      multipleBirth?: number | null
      maritalStatus?: string | null
      occupation?: string | null
      detailsExist?: boolean | null
      dateOfMarriage?: any | null
      educationalAttainment?: string | null
      nationality?: Array<string | null> | null
      name?: Array<{
        __typename?: 'HumanName'
        use?: string | null
        firstNames?: string | null
        familyName?: string | null
      } | null> | null
      identifier?: Array<{
        __typename?: 'IdentityType'
        id?: string | null
        type?: string | null
      } | null> | null
      address?: Array<{
        __typename?: 'Address'
        type?: string | null
        line?: Array<string | null> | null
        district?: string | null
        state?: string | null
        city?: string | null
        postalCode?: string | null
        country?: string | null
      } | null> | null
      telecom?: Array<{
        __typename?: 'ContactPoint'
        system?: string | null
        value?: string | null
      } | null> | null
    } | null
    father?: {
      __typename?: 'Person'
      id?: string | null
      birthDate?: string | null
      maritalStatus?: string | null
      occupation?: string | null
      detailsExist?: boolean | null
      dateOfMarriage?: any | null
      educationalAttainment?: string | null
      nationality?: Array<string | null> | null
      reasonNotApplying?: string | null
      name?: Array<{
        __typename?: 'HumanName'
        use?: string | null
        firstNames?: string | null
        familyName?: string | null
      } | null> | null
      identifier?: Array<{
        __typename?: 'IdentityType'
        id?: string | null
        type?: string | null
      } | null> | null
      address?: Array<{
        __typename?: 'Address'
        type?: string | null
        line?: Array<string | null> | null
        district?: string | null
        state?: string | null
        city?: string | null
        postalCode?: string | null
        country?: string | null
      } | null> | null
      telecom?: Array<{
        __typename?: 'ContactPoint'
        system?: string | null
        value?: string | null
      } | null> | null
    } | null
    registration?: {
      __typename?: 'Registration'
      id?: string | null
      informantType?: string | null
      contactPhoneNumber?: string | null
      type?: RegistrationType | null
      trackingId?: string | null
      registrationNumber?: string | null
      attachments?: Array<{
        __typename?: 'Attachment'
        data?: string | null
        uri?: string | null
        type?: string | null
        contentType?: string | null
        subject?: string | null
      } | null> | null
      status?: Array<{
        __typename?: 'RegWorkflow'
        type?: RegStatus | null
        timestamp?: any | null
        comments?: Array<{
          __typename?: 'Comment'
          comment?: string | null
        } | null> | null
      } | null> | null
    } | null
    eventLocation?: {
      __typename?: 'Location'
      id: string
      type?: string | null
      address?: {
        __typename?: 'Address'
        line?: Array<string | null> | null
        district?: string | null
        state?: string | null
        city?: string | null
        postalCode?: string | null
        country?: string | null
      } | null
    } | null
    questionnaire?: Array<{
      __typename?: 'QuestionnaireQuestion'
      fieldId?: string | null
      value?: string | null
    } | null> | null
  } | null
}

export type FetchDeathRegistrationQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type FetchDeathRegistrationQuery = {
  __typename?: 'Query'
  fetchDeathRegistration?: {
    __typename: 'DeathRegistration'
    _fhirIDMap?: any | null
    id: string
    createdAt?: any | null
    mannerOfDeath?: string | null
    causeOfDeath?: string | null
    maleDependentsOfDeceased?: number | null
    femaleDependentsOfDeceased?: number | null
    causeOfDeathEstablished?: string | null
    causeOfDeathMethod?: string | null
    deceased?: {
      __typename?: 'Person'
      id?: string | null
      birthDate?: string | null
      age?: number | null
      gender?: string | null
      maritalStatus?: string | null
      nationality?: Array<string | null> | null
      name?: Array<{
        __typename?: 'HumanName'
        use?: string | null
        firstNames?: string | null
        familyName?: string | null
      } | null> | null
      identifier?: Array<{
        __typename?: 'IdentityType'
        id?: string | null
        type?: string | null
      } | null> | null
      deceased?: { __typename?: 'Deceased'; deathDate?: string | null } | null
      address?: Array<{
        __typename?: 'Address'
        type?: string | null
        line?: Array<string | null> | null
        district?: string | null
        state?: string | null
        city?: string | null
        postalCode?: string | null
        country?: string | null
      } | null> | null
    } | null
    informant?: {
      __typename?: 'RelatedPerson'
      id?: string | null
      relationship?: string | null
      _fhirIDPatient?: string | null
      nationality?: Array<string | null> | null
      occupation?: string | null
      birthDate?: string | null
      identifier?: Array<{
        __typename?: 'IdentityType'
        id?: string | null
        type?: string | null
      } | null> | null
      name?: Array<{
        __typename?: 'HumanName'
        use?: string | null
        firstNames?: string | null
        familyName?: string | null
      } | null> | null
      telecom?: Array<{
        __typename?: 'ContactPoint'
        system?: string | null
        value?: string | null
      } | null> | null
      address?: Array<{
        __typename?: 'Address'
        type?: string | null
        line?: Array<string | null> | null
        district?: string | null
        state?: string | null
        city?: string | null
        postalCode?: string | null
        country?: string | null
      } | null> | null
    } | null
    father?: {
      __typename?: 'Person'
      id?: string | null
      name?: Array<{
        __typename?: 'HumanName'
        use?: string | null
        firstNames?: string | null
        familyName?: string | null
      } | null> | null
    } | null
    mother?: {
      __typename?: 'Person'
      id?: string | null
      name?: Array<{
        __typename?: 'HumanName'
        use?: string | null
        firstNames?: string | null
        familyName?: string | null
      } | null> | null
    } | null
    medicalPractitioner?: {
      __typename?: 'MedicalPractitioner'
      name?: string | null
      qualification?: string | null
      lastVisitDate?: any | null
    } | null
    registration?: {
      __typename?: 'Registration'
      id?: string | null
      informantType?: string | null
      contactPhoneNumber?: string | null
      type?: RegistrationType | null
      trackingId?: string | null
      registrationNumber?: string | null
      attachments?: Array<{
        __typename?: 'Attachment'
        data?: string | null
        uri?: string | null
        type?: string | null
        contentType?: string | null
        subject?: string | null
      } | null> | null
      status?: Array<{
        __typename?: 'RegWorkflow'
        type?: RegStatus | null
        timestamp?: any | null
      } | null> | null
    } | null
    eventLocation?: {
      __typename?: 'Location'
      id: string
      type?: string | null
      address?: {
        __typename?: 'Address'
        type?: string | null
        line?: Array<string | null> | null
        district?: string | null
        state?: string | null
        city?: string | null
        postalCode?: string | null
        country?: string | null
      } | null
    } | null
  } | null
}

export type GetSystemRolesQueryVariables = Exact<{ [key: string]: never }>

export type GetSystemRolesQuery = {
  __typename?: 'Query'
  getSystemRoles?: Array<{
    __typename?: 'SystemRole'
    value: SystemRoleType
    roles: Array<{
      __typename?: 'Role'
      _id: string
      labels: Array<{ __typename?: 'RoleLabel'; label: string }>
    }>
  }> | null
}

export type GetTotalMetricsQueryVariables = Exact<{
  event: Scalars['String']
  timeStart: Scalars['String']
  timeEnd: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
}>

export type GetTotalMetricsQuery = {
  __typename?: 'Query'
  getTotalMetrics?: {
    __typename: 'TotalMetricsResult'
    estimated: {
      __typename: 'Estimation'
      totalEstimation: number
      maleEstimation: number
      femaleEstimation: number
      locationId: string
      locationLevel: string
    }
    results: Array<{
      __typename: 'EventMetrics'
      total: number
      gender: string
      eventLocationType: string
      practitionerRole: string
      timeLabel: string
    }>
  } | null
}
